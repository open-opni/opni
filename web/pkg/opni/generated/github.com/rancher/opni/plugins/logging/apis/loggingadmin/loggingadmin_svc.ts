// @generated by service-generator v0.0.1 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file github.com/open-panoptes/opni/plugins/logging/apis/loggingadmin/loggingadmin.proto (package loggingadmin, syntax proto3)
/* eslint-disable */

import { OpensearchClusterV2, SnapshotReference, SnapshotSchedule, SnapshotStatusList as SnapshotStatusList$1, StatusResponse, StorageClassResponse, UpgradeAvailableResponse, UpgradeOptions } from "./loggingadmin_pb";
import { axios } from "@pkg/opni/utils/axios";
import { SnapshotStatusList } from "@pkg/opni/models/LoggingAdminV2/SnapshotStatusList";


export async function GetOpensearchCluster(): Promise<OpensearchClusterV2> {
  try {
    
    const rawResponse = (await axios.request({
      method: 'get',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/LoggingAdminV2/logging/cluster`
    })).data;

    const response = OpensearchClusterV2.fromBinary(new Uint8Array(rawResponse));
    console.info('Here is the response for a request to LoggingAdminV2-GetOpensearchCluster:', response);
    return response;
  } catch (ex: any) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, Array.from(new Uint8Array(ex?.response?.data)));
      console.error(s);
    }
    throw ex;
  }
}


export async function DeleteOpensearchCluster(): Promise<void> {
  try {
    
    const rawResponse = (await axios.request({
      method: 'delete',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/LoggingAdminV2/logging/cluster`
    })).data;

    const response = rawResponse;
    console.info('Here is the response for a request to LoggingAdminV2-DeleteOpensearchCluster:', response);
    return response;
  } catch (ex: any) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, Array.from(new Uint8Array(ex?.response?.data)));
      console.error(s);
    }
    throw ex;
  }
}


export async function CreateOrUpdateOpensearchCluster(input: OpensearchClusterV2): Promise<void> {
  try {
    
    if (input) {
      console.info('Here is the input for a request to LoggingAdminV2-CreateOrUpdateOpensearchCluster:', input);
    }
  
    const rawResponse = (await axios.request({
      method: 'put',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/LoggingAdminV2/logging/cluster`,
    data: input?.toBinary() as ArrayBuffer
    })).data;

    const response = rawResponse;
    console.info('Here is the response for a request to LoggingAdminV2-CreateOrUpdateOpensearchCluster:', response);
    return response;
  } catch (ex: any) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, Array.from(new Uint8Array(ex?.response?.data)));
      console.error(s);
    }
    throw ex;
  }
}


export async function UpgradeAvailable(): Promise<UpgradeAvailableResponse> {
  try {
    
    const rawResponse = (await axios.request({
      method: 'get',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/LoggingAdminV2/logging/upgrade/available`
    })).data;

    const response = UpgradeAvailableResponse.fromBinary(new Uint8Array(rawResponse));
    console.info('Here is the response for a request to LoggingAdminV2-UpgradeAvailable:', response);
    return response;
  } catch (ex: any) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, Array.from(new Uint8Array(ex?.response?.data)));
      console.error(s);
    }
    throw ex;
  }
}


export async function DoUpgrade(input: UpgradeOptions): Promise<void> {
  try {
    
    if (input) {
      console.info('Here is the input for a request to LoggingAdminV2-DoUpgrade:', input);
    }
  
    const rawResponse = (await axios.request({
      method: 'post',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/LoggingAdminV2/logging/upgrade/do`,
    data: input?.toBinary() as ArrayBuffer
    })).data;

    const response = rawResponse;
    console.info('Here is the response for a request to LoggingAdminV2-DoUpgrade:', response);
    return response;
  } catch (ex: any) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, Array.from(new Uint8Array(ex?.response?.data)));
      console.error(s);
    }
    throw ex;
  }
}


export async function GetStorageClasses(): Promise<StorageClassResponse> {
  try {
    
    const rawResponse = (await axios.request({
      method: 'get',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/LoggingAdminV2/logging/storageclasses`
    })).data;

    const response = StorageClassResponse.fromBinary(new Uint8Array(rawResponse));
    console.info('Here is the response for a request to LoggingAdminV2-GetStorageClasses:', response);
    return response;
  } catch (ex: any) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, Array.from(new Uint8Array(ex?.response?.data)));
      console.error(s);
    }
    throw ex;
  }
}


export async function GetOpensearchStatus(): Promise<StatusResponse> {
  try {
    
    const rawResponse = (await axios.request({
      method: 'get',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/LoggingAdminV2/logging/status`
    })).data;

    const response = StatusResponse.fromBinary(new Uint8Array(rawResponse));
    console.info('Here is the response for a request to LoggingAdminV2-GetOpensearchStatus:', response);
    return response;
  } catch (ex: any) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, Array.from(new Uint8Array(ex?.response?.data)));
      console.error(s);
    }
    throw ex;
  }
}


export async function CreateOrUpdateSnapshotSchedule(input: SnapshotSchedule): Promise<void> {
  try {
    
    if (input) {
      console.info('Here is the input for a request to LoggingAdminV2-CreateOrUpdateSnapshotSchedule:', input);
    }
  
    const rawResponse = (await axios.request({
      method: 'put',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/LoggingAdminV2/logging/snapshot`,
    data: input?.toBinary() as ArrayBuffer
    })).data;

    const response = rawResponse;
    console.info('Here is the response for a request to LoggingAdminV2-CreateOrUpdateSnapshotSchedule:', response);
    return response;
  } catch (ex: any) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, Array.from(new Uint8Array(ex?.response?.data)));
      console.error(s);
    }
    throw ex;
  }
}


export async function GetSnapshotSchedule(input: SnapshotReference): Promise<SnapshotSchedule> {
  try {
    
    if (input) {
      console.info('Here is the input for a request to LoggingAdminV2-GetSnapshotSchedule:', input);
    }
  
    const rawResponse = (await axios.request({
      method: 'get',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/LoggingAdminV2/logging/snapshot/${input.name}`,
    data: input?.toBinary() as ArrayBuffer
    })).data;

    const response = SnapshotSchedule.fromBinary(new Uint8Array(rawResponse));
    console.info('Here is the response for a request to LoggingAdminV2-GetSnapshotSchedule:', response);
    return response;
  } catch (ex: any) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, Array.from(new Uint8Array(ex?.response?.data)));
      console.error(s);
    }
    throw ex;
  }
}


export async function DeleteSnapshotSchedule(input: SnapshotReference): Promise<void> {
  try {
    
    if (input) {
      console.info('Here is the input for a request to LoggingAdminV2-DeleteSnapshotSchedule:', input);
    }
  
    const rawResponse = (await axios.request({
      method: 'delete',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/LoggingAdminV2/logging/snapshot/${input.name}`,
    data: input?.toBinary() as ArrayBuffer
    })).data;

    const response = rawResponse;
    console.info('Here is the response for a request to LoggingAdminV2-DeleteSnapshotSchedule:', response);
    return response;
  } catch (ex: any) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, Array.from(new Uint8Array(ex?.response?.data)));
      console.error(s);
    }
    throw ex;
  }
}


export async function ListSnapshotSchedules(): Promise<SnapshotStatusList> {
  try {
    
    const rawResponse = (await axios.request({
      method: 'get',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/LoggingAdminV2/logging/snapshot`
    })).data;

    const response = SnapshotStatusList$1.fromBinary(new Uint8Array(rawResponse));
    console.info('Here is the response for a request to LoggingAdminV2-ListSnapshotSchedules:', response);
    return new SnapshotStatusList(response);
  } catch (ex: any) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, Array.from(new Uint8Array(ex?.response?.data)));
      console.error(s);
    }
    throw ex;
  }
}

