// @generated by protoc-gen-es v1.3.0 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file github.com/open-panoptes/opni/plugins/logging/apis/loggingadmin/loggingadmin.proto (package loggingadmin, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { Toleration } from "../../../../../../../k8s.io/api/core/v1/generated_pb";

/**
 * @generated from message loggingadmin.OpensearchClusterV2
 */
export class OpensearchClusterV2 extends Message<OpensearchClusterV2> {
  /**
   * @generated from field: string externalURL = 1;
   */
  externalURL = "";

  /**
   * @generated from field: loggingadmin.DataDetails dataNodes = 2;
   */
  dataNodes?: DataDetails;

  /**
   * @generated from field: optional loggingadmin.IngestDetails ingestNodes = 3;
   */
  ingestNodes?: IngestDetails;

  /**
   * @generated from field: optional loggingadmin.ControlplaneDetails controlplaneNodes = 4;
   */
  controlplaneNodes?: ControlplaneDetails;

  /**
   * @generated from field: optional loggingadmin.DashboardsDetails dashboards = 5;
   */
  dashboards?: DashboardsDetails;

  /**
   * @generated from field: optional string dataRetention = 6;
   */
  dataRetention?: string;

  /**
   * @generated from field: optional loggingadmin.OpensearchS3Settings s3 = 7;
   */
  s3?: OpensearchS3Settings;

  constructor(data?: PartialMessage<OpensearchClusterV2>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "loggingadmin.OpensearchClusterV2";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "externalURL", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "dataNodes", kind: "message", T: DataDetails },
    { no: 3, name: "ingestNodes", kind: "message", T: IngestDetails, opt: true },
    { no: 4, name: "controlplaneNodes", kind: "message", T: ControlplaneDetails, opt: true },
    { no: 5, name: "dashboards", kind: "message", T: DashboardsDetails, opt: true },
    { no: 6, name: "dataRetention", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "s3", kind: "message", T: OpensearchS3Settings, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OpensearchClusterV2 {
    return new OpensearchClusterV2().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OpensearchClusterV2 {
    return new OpensearchClusterV2().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OpensearchClusterV2 {
    return new OpensearchClusterV2().fromJsonString(jsonString, options);
  }

  static equals(a: OpensearchClusterV2 | PlainMessage<OpensearchClusterV2> | undefined, b: OpensearchClusterV2 | PlainMessage<OpensearchClusterV2> | undefined): boolean {
    return proto3.util.equals(OpensearchClusterV2, a, b);
  }
}

/**
 * @generated from message loggingadmin.DataPersistence
 */
export class DataPersistence extends Message<DataPersistence> {
  /**
   * @generated from field: optional bool enabled = 1;
   */
  enabled?: boolean;

  /**
   * @generated from field: optional string storageClass = 2;
   */
  storageClass?: string;

  constructor(data?: PartialMessage<DataPersistence>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "loggingadmin.DataPersistence";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 2, name: "storageClass", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataPersistence {
    return new DataPersistence().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataPersistence {
    return new DataPersistence().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataPersistence {
    return new DataPersistence().fromJsonString(jsonString, options);
  }

  static equals(a: DataPersistence | PlainMessage<DataPersistence> | undefined, b: DataPersistence | PlainMessage<DataPersistence> | undefined): boolean {
    return proto3.util.equals(DataPersistence, a, b);
  }
}

/**
 * @generated from message loggingadmin.CPUResource
 */
export class CPUResource extends Message<CPUResource> {
  /**
   * @generated from field: string request = 1;
   */
  request = "";

  /**
   * @generated from field: string limit = 2;
   */
  limit = "";

  constructor(data?: PartialMessage<CPUResource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "loggingadmin.CPUResource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "limit", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CPUResource {
    return new CPUResource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CPUResource {
    return new CPUResource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CPUResource {
    return new CPUResource().fromJsonString(jsonString, options);
  }

  static equals(a: CPUResource | PlainMessage<CPUResource> | undefined, b: CPUResource | PlainMessage<CPUResource> | undefined): boolean {
    return proto3.util.equals(CPUResource, a, b);
  }
}

/**
 * @generated from message loggingadmin.OpensearchS3Settings
 */
export class OpensearchS3Settings extends Message<OpensearchS3Settings> {
  /**
   * @generated from field: string endpoint = 1;
   */
  endpoint = "";

  /**
   * @generated from field: bool insecure = 2;
   */
  insecure = false;

  /**
   * @generated from field: bool pathStyleAccess = 3;
   */
  pathStyleAccess = false;

  /**
   * @generated from field: loggingadmin.S3Credentials credentials = 4;
   */
  credentials?: S3Credentials;

  /**
   * @generated from field: string bucket = 5;
   */
  bucket = "";

  /**
   * @generated from field: optional string folder = 6;
   */
  folder?: string;

  /**
   * @generated from field: loggingadmin.ProxySettings proxySettings = 7;
   */
  proxySettings?: ProxySettings;

  constructor(data?: PartialMessage<OpensearchS3Settings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "loggingadmin.OpensearchS3Settings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "insecure", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "pathStyleAccess", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "credentials", kind: "message", T: S3Credentials },
    { no: 5, name: "bucket", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "folder", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "proxySettings", kind: "message", T: ProxySettings },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OpensearchS3Settings {
    return new OpensearchS3Settings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OpensearchS3Settings {
    return new OpensearchS3Settings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OpensearchS3Settings {
    return new OpensearchS3Settings().fromJsonString(jsonString, options);
  }

  static equals(a: OpensearchS3Settings | PlainMessage<OpensearchS3Settings> | undefined, b: OpensearchS3Settings | PlainMessage<OpensearchS3Settings> | undefined): boolean {
    return proto3.util.equals(OpensearchS3Settings, a, b);
  }
}

/**
 * @generated from message loggingadmin.ProxySettings
 */
export class ProxySettings extends Message<ProxySettings> {
  /**
   * @generated from field: string proxyHost = 1;
   */
  proxyHost = "";

  /**
   * @generated from field: optional int32 proxyPort = 2;
   */
  proxyPort?: number;

  constructor(data?: PartialMessage<ProxySettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "loggingadmin.ProxySettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "proxyHost", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "proxyPort", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProxySettings {
    return new ProxySettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProxySettings {
    return new ProxySettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProxySettings {
    return new ProxySettings().fromJsonString(jsonString, options);
  }

  static equals(a: ProxySettings | PlainMessage<ProxySettings> | undefined, b: ProxySettings | PlainMessage<ProxySettings> | undefined): boolean {
    return proto3.util.equals(ProxySettings, a, b);
  }
}

/**
 * @generated from message loggingadmin.S3Credentials
 */
export class S3Credentials extends Message<S3Credentials> {
  /**
   * @generated from field: string accessKey = 1;
   */
  accessKey = "";

  /**
   * @generated from field: string secretKey = 2;
   */
  secretKey = "";

  constructor(data?: PartialMessage<S3Credentials>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "loggingadmin.S3Credentials";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "accessKey", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "secretKey", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): S3Credentials {
    return new S3Credentials().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): S3Credentials {
    return new S3Credentials().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): S3Credentials {
    return new S3Credentials().fromJsonString(jsonString, options);
  }

  static equals(a: S3Credentials | PlainMessage<S3Credentials> | undefined, b: S3Credentials | PlainMessage<S3Credentials> | undefined): boolean {
    return proto3.util.equals(S3Credentials, a, b);
  }
}

/**
 * @generated from message loggingadmin.OpensearchNodeDetails
 */
export class OpensearchNodeDetails extends Message<OpensearchNodeDetails> {
  /**
   * @generated from field: string Name = 1;
   */
  Name = "";

  /**
   * @generated from field: optional int32 Replicas = 2;
   */
  Replicas?: number;

  /**
   * @generated from field: string DiskSize = 3;
   */
  DiskSize = "";

  /**
   * @generated from field: string MemoryLimit = 4;
   */
  MemoryLimit = "";

  /**
   * @generated from field: optional loggingadmin.CPUResource CPUResources = 5;
   */
  CPUResources?: CPUResource;

  /**
   * @generated from field: optional bool EnableAntiAffinity = 6;
   */
  EnableAntiAffinity?: boolean;

  /**
   * @generated from field: map<string, string> NodeSelector = 7;
   */
  NodeSelector: { [key: string]: string } = {};

  /**
   * @generated from field: repeated k8s.io.api.core.v1.Toleration Tolerations = 8;
   */
  Tolerations: Toleration[] = [];

  /**
   * @generated from field: repeated string Roles = 9;
   */
  Roles: string[] = [];

  /**
   * @generated from field: optional loggingadmin.DataPersistence Persistence = 10;
   */
  Persistence?: DataPersistence;

  constructor(data?: PartialMessage<OpensearchNodeDetails>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "loggingadmin.OpensearchNodeDetails";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "Replicas", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 3, name: "DiskSize", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "MemoryLimit", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "CPUResources", kind: "message", T: CPUResource, opt: true },
    { no: 6, name: "EnableAntiAffinity", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 7, name: "NodeSelector", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 8, name: "Tolerations", kind: "message", T: Toleration, repeated: true },
    { no: 9, name: "Roles", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 10, name: "Persistence", kind: "message", T: DataPersistence, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OpensearchNodeDetails {
    return new OpensearchNodeDetails().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OpensearchNodeDetails {
    return new OpensearchNodeDetails().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OpensearchNodeDetails {
    return new OpensearchNodeDetails().fromJsonString(jsonString, options);
  }

  static equals(a: OpensearchNodeDetails | PlainMessage<OpensearchNodeDetails> | undefined, b: OpensearchNodeDetails | PlainMessage<OpensearchNodeDetails> | undefined): boolean {
    return proto3.util.equals(OpensearchNodeDetails, a, b);
  }
}

/**
 * @generated from message loggingadmin.DashboardsDetails
 */
export class DashboardsDetails extends Message<DashboardsDetails> {
  /**
   * @generated from field: optional bool enabled = 1;
   */
  enabled?: boolean;

  /**
   * @generated from field: optional int32 replicas = 2;
   */
  replicas?: number;

  /**
   * @generated from field: loggingadmin.ResourceRequirements resources = 3;
   */
  resources?: ResourceRequirements;

  constructor(data?: PartialMessage<DashboardsDetails>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "loggingadmin.DashboardsDetails";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 2, name: "replicas", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 3, name: "resources", kind: "message", T: ResourceRequirements },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DashboardsDetails {
    return new DashboardsDetails().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DashboardsDetails {
    return new DashboardsDetails().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DashboardsDetails {
    return new DashboardsDetails().fromJsonString(jsonString, options);
  }

  static equals(a: DashboardsDetails | PlainMessage<DashboardsDetails> | undefined, b: DashboardsDetails | PlainMessage<DashboardsDetails> | undefined): boolean {
    return proto3.util.equals(DashboardsDetails, a, b);
  }
}

/**
 * @generated from message loggingadmin.UpgradeAvailableResponse
 */
export class UpgradeAvailableResponse extends Message<UpgradeAvailableResponse> {
  /**
   * @generated from field: bool upgradePending = 1;
   */
  upgradePending = false;

  constructor(data?: PartialMessage<UpgradeAvailableResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "loggingadmin.UpgradeAvailableResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "upgradePending", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpgradeAvailableResponse {
    return new UpgradeAvailableResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpgradeAvailableResponse {
    return new UpgradeAvailableResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpgradeAvailableResponse {
    return new UpgradeAvailableResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpgradeAvailableResponse | PlainMessage<UpgradeAvailableResponse> | undefined, b: UpgradeAvailableResponse | PlainMessage<UpgradeAvailableResponse> | undefined): boolean {
    return proto3.util.equals(UpgradeAvailableResponse, a, b);
  }
}

/**
 * @generated from message loggingadmin.UpgradeOptions
 */
export class UpgradeOptions extends Message<UpgradeOptions> {
  /**
   * @generated from field: bool snapshotCluster = 1;
   */
  snapshotCluster = false;

  constructor(data?: PartialMessage<UpgradeOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "loggingadmin.UpgradeOptions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "snapshotCluster", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpgradeOptions {
    return new UpgradeOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpgradeOptions {
    return new UpgradeOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpgradeOptions {
    return new UpgradeOptions().fromJsonString(jsonString, options);
  }

  static equals(a: UpgradeOptions | PlainMessage<UpgradeOptions> | undefined, b: UpgradeOptions | PlainMessage<UpgradeOptions> | undefined): boolean {
    return proto3.util.equals(UpgradeOptions, a, b);
  }
}

/**
 * @generated from message loggingadmin.StorageClassResponse
 */
export class StorageClassResponse extends Message<StorageClassResponse> {
  /**
   * @generated from field: repeated string storageClasses = 1;
   */
  storageClasses: string[] = [];

  constructor(data?: PartialMessage<StorageClassResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "loggingadmin.StorageClassResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "storageClasses", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StorageClassResponse {
    return new StorageClassResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StorageClassResponse {
    return new StorageClassResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StorageClassResponse {
    return new StorageClassResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StorageClassResponse | PlainMessage<StorageClassResponse> | undefined, b: StorageClassResponse | PlainMessage<StorageClassResponse> | undefined): boolean {
    return proto3.util.equals(StorageClassResponse, a, b);
  }
}

/**
 * @generated from message loggingadmin.ResourceRequirements
 */
export class ResourceRequirements extends Message<ResourceRequirements> {
  /**
   * @generated from field: loggingadmin.ComputeResourceQuantities requests = 1;
   */
  requests?: ComputeResourceQuantities;

  /**
   * @generated from field: loggingadmin.ComputeResourceQuantities limits = 2;
   */
  limits?: ComputeResourceQuantities;

  constructor(data?: PartialMessage<ResourceRequirements>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "loggingadmin.ResourceRequirements";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "requests", kind: "message", T: ComputeResourceQuantities },
    { no: 2, name: "limits", kind: "message", T: ComputeResourceQuantities },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResourceRequirements {
    return new ResourceRequirements().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResourceRequirements {
    return new ResourceRequirements().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResourceRequirements {
    return new ResourceRequirements().fromJsonString(jsonString, options);
  }

  static equals(a: ResourceRequirements | PlainMessage<ResourceRequirements> | undefined, b: ResourceRequirements | PlainMessage<ResourceRequirements> | undefined): boolean {
    return proto3.util.equals(ResourceRequirements, a, b);
  }
}

/**
 * @generated from message loggingadmin.ComputeResourceQuantities
 */
export class ComputeResourceQuantities extends Message<ComputeResourceQuantities> {
  /**
   * @generated from field: string cpu = 1;
   */
  cpu = "";

  /**
   * @generated from field: string memory = 2;
   */
  memory = "";

  constructor(data?: PartialMessage<ComputeResourceQuantities>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "loggingadmin.ComputeResourceQuantities";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cpu", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "memory", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ComputeResourceQuantities {
    return new ComputeResourceQuantities().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ComputeResourceQuantities {
    return new ComputeResourceQuantities().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ComputeResourceQuantities {
    return new ComputeResourceQuantities().fromJsonString(jsonString, options);
  }

  static equals(a: ComputeResourceQuantities | PlainMessage<ComputeResourceQuantities> | undefined, b: ComputeResourceQuantities | PlainMessage<ComputeResourceQuantities> | undefined): boolean {
    return proto3.util.equals(ComputeResourceQuantities, a, b);
  }
}

/**
 * @generated from message loggingadmin.StatusResponse
 */
export class StatusResponse extends Message<StatusResponse> {
  /**
   * @generated from field: int32 status = 1;
   */
  status = 0;

  /**
   * @generated from field: string details = 2;
   */
  details = "";

  constructor(data?: PartialMessage<StatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "loggingadmin.StatusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "details", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StatusResponse {
    return new StatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StatusResponse {
    return new StatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StatusResponse {
    return new StatusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StatusResponse | PlainMessage<StatusResponse> | undefined, b: StatusResponse | PlainMessage<StatusResponse> | undefined): boolean {
    return proto3.util.equals(StatusResponse, a, b);
  }
}

/**
 * @generated from message loggingadmin.DataDetails
 */
export class DataDetails extends Message<DataDetails> {
  /**
   * @generated from field: optional int32 replicas = 1;
   */
  replicas?: number;

  /**
   * @generated from field: string diskSize = 2;
   */
  diskSize = "";

  /**
   * @generated from field: string memoryLimit = 3;
   */
  memoryLimit = "";

  /**
   * @generated from field: optional loggingadmin.CPUResource cpuResources = 4;
   */
  cpuResources?: CPUResource;

  /**
   * @generated from field: optional bool enableAntiAffinity = 5;
   */
  enableAntiAffinity?: boolean;

  /**
   * @generated from field: map<string, string> nodeSelector = 6;
   */
  nodeSelector: { [key: string]: string } = {};

  /**
   * @generated from field: repeated k8s.io.api.core.v1.Toleration tolerations = 7;
   */
  tolerations: Toleration[] = [];

  /**
   * @generated from field: optional loggingadmin.DataPersistence persistence = 8;
   */
  persistence?: DataPersistence;

  constructor(data?: PartialMessage<DataDetails>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "loggingadmin.DataDetails";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "replicas", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "diskSize", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "memoryLimit", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "cpuResources", kind: "message", T: CPUResource, opt: true },
    { no: 5, name: "enableAntiAffinity", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 6, name: "nodeSelector", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 7, name: "tolerations", kind: "message", T: Toleration, repeated: true },
    { no: 8, name: "persistence", kind: "message", T: DataPersistence, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataDetails {
    return new DataDetails().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataDetails {
    return new DataDetails().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataDetails {
    return new DataDetails().fromJsonString(jsonString, options);
  }

  static equals(a: DataDetails | PlainMessage<DataDetails> | undefined, b: DataDetails | PlainMessage<DataDetails> | undefined): boolean {
    return proto3.util.equals(DataDetails, a, b);
  }
}

/**
 * @generated from message loggingadmin.IngestDetails
 */
export class IngestDetails extends Message<IngestDetails> {
  /**
   * @generated from field: optional int32 replicas = 1;
   */
  replicas?: number;

  /**
   * @generated from field: string memoryLimit = 2;
   */
  memoryLimit = "";

  /**
   * @generated from field: optional loggingadmin.CPUResource cpuResources = 3;
   */
  cpuResources?: CPUResource;

  /**
   * @generated from field: optional bool enableAntiAffinity = 4;
   */
  enableAntiAffinity?: boolean;

  /**
   * @generated from field: map<string, string> nodeSelector = 5;
   */
  nodeSelector: { [key: string]: string } = {};

  /**
   * @generated from field: repeated k8s.io.api.core.v1.Toleration tolerations = 6;
   */
  tolerations: Toleration[] = [];

  constructor(data?: PartialMessage<IngestDetails>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "loggingadmin.IngestDetails";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "replicas", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "memoryLimit", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "cpuResources", kind: "message", T: CPUResource, opt: true },
    { no: 4, name: "enableAntiAffinity", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 5, name: "nodeSelector", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 6, name: "tolerations", kind: "message", T: Toleration, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IngestDetails {
    return new IngestDetails().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IngestDetails {
    return new IngestDetails().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IngestDetails {
    return new IngestDetails().fromJsonString(jsonString, options);
  }

  static equals(a: IngestDetails | PlainMessage<IngestDetails> | undefined, b: IngestDetails | PlainMessage<IngestDetails> | undefined): boolean {
    return proto3.util.equals(IngestDetails, a, b);
  }
}

/**
 * @generated from message loggingadmin.ControlplaneDetails
 */
export class ControlplaneDetails extends Message<ControlplaneDetails> {
  /**
   * @generated from field: optional int32 replicas = 1;
   */
  replicas?: number;

  /**
   * @generated from field: map<string, string> nodeSelector = 2;
   */
  nodeSelector: { [key: string]: string } = {};

  /**
   * @generated from field: repeated k8s.io.api.core.v1.Toleration tolerations = 3;
   */
  tolerations: Toleration[] = [];

  /**
   * @generated from field: optional loggingadmin.DataPersistence persistence = 4;
   */
  persistence?: DataPersistence;

  constructor(data?: PartialMessage<ControlplaneDetails>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "loggingadmin.ControlplaneDetails";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "replicas", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "nodeSelector", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 3, name: "tolerations", kind: "message", T: Toleration, repeated: true },
    { no: 4, name: "persistence", kind: "message", T: DataPersistence, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ControlplaneDetails {
    return new ControlplaneDetails().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ControlplaneDetails {
    return new ControlplaneDetails().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ControlplaneDetails {
    return new ControlplaneDetails().fromJsonString(jsonString, options);
  }

  static equals(a: ControlplaneDetails | PlainMessage<ControlplaneDetails> | undefined, b: ControlplaneDetails | PlainMessage<ControlplaneDetails> | undefined): boolean {
    return proto3.util.equals(ControlplaneDetails, a, b);
  }
}

/**
 * @generated from message loggingadmin.SnapshotSchedule
 */
export class SnapshotSchedule extends Message<SnapshotSchedule> {
  /**
   * @generated from field: loggingadmin.SnapshotReference ref = 1;
   */
  ref?: SnapshotReference;

  /**
   * @generated from field: string cronSchedule = 3;
   */
  cronSchedule = "";

  /**
   * @generated from field: optional loggingadmin.SnapshotRetention retention = 4;
   */
  retention?: SnapshotRetention;

  /**
   * @generated from field: repeated string additionalIndices = 5;
   */
  additionalIndices: string[] = [];

  constructor(data?: PartialMessage<SnapshotSchedule>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "loggingadmin.SnapshotSchedule";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ref", kind: "message", T: SnapshotReference },
    { no: 3, name: "cronSchedule", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "retention", kind: "message", T: SnapshotRetention, opt: true },
    { no: 5, name: "additionalIndices", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SnapshotSchedule {
    return new SnapshotSchedule().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SnapshotSchedule {
    return new SnapshotSchedule().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SnapshotSchedule {
    return new SnapshotSchedule().fromJsonString(jsonString, options);
  }

  static equals(a: SnapshotSchedule | PlainMessage<SnapshotSchedule> | undefined, b: SnapshotSchedule | PlainMessage<SnapshotSchedule> | undefined): boolean {
    return proto3.util.equals(SnapshotSchedule, a, b);
  }
}

/**
 * @generated from message loggingadmin.SnapshotReference
 */
export class SnapshotReference extends Message<SnapshotReference> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<SnapshotReference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "loggingadmin.SnapshotReference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SnapshotReference {
    return new SnapshotReference().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SnapshotReference {
    return new SnapshotReference().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SnapshotReference {
    return new SnapshotReference().fromJsonString(jsonString, options);
  }

  static equals(a: SnapshotReference | PlainMessage<SnapshotReference> | undefined, b: SnapshotReference | PlainMessage<SnapshotReference> | undefined): boolean {
    return proto3.util.equals(SnapshotReference, a, b);
  }
}

/**
 * @generated from message loggingadmin.SnapshotRetention
 */
export class SnapshotRetention extends Message<SnapshotRetention> {
  /**
   * @generated from field: optional string timeRetention = 1;
   */
  timeRetention?: string;

  /**
   * @generated from field: optional int32 maxSnapshots = 2;
   */
  maxSnapshots?: number;

  constructor(data?: PartialMessage<SnapshotRetention>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "loggingadmin.SnapshotRetention";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "timeRetention", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "maxSnapshots", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SnapshotRetention {
    return new SnapshotRetention().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SnapshotRetention {
    return new SnapshotRetention().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SnapshotRetention {
    return new SnapshotRetention().fromJsonString(jsonString, options);
  }

  static equals(a: SnapshotRetention | PlainMessage<SnapshotRetention> | undefined, b: SnapshotRetention | PlainMessage<SnapshotRetention> | undefined): boolean {
    return proto3.util.equals(SnapshotRetention, a, b);
  }
}

/**
 * @generated from message loggingadmin.SnapshotStatusList
 */
export class SnapshotStatusList extends Message<SnapshotStatusList> {
  /**
   * @generated from field: repeated loggingadmin.SnapshotStatus statuses = 1;
   */
  statuses: SnapshotStatus[] = [];

  constructor(data?: PartialMessage<SnapshotStatusList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "loggingadmin.SnapshotStatusList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "statuses", kind: "message", T: SnapshotStatus, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SnapshotStatusList {
    return new SnapshotStatusList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SnapshotStatusList {
    return new SnapshotStatusList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SnapshotStatusList {
    return new SnapshotStatusList().fromJsonString(jsonString, options);
  }

  static equals(a: SnapshotStatusList | PlainMessage<SnapshotStatusList> | undefined, b: SnapshotStatusList | PlainMessage<SnapshotStatusList> | undefined): boolean {
    return proto3.util.equals(SnapshotStatusList, a, b);
  }
}

/**
 * @generated from message loggingadmin.SnapshotStatus
 */
export class SnapshotStatus extends Message<SnapshotStatus> {
  /**
   * @generated from field: loggingadmin.SnapshotReference ref = 1;
   */
  ref?: SnapshotReference;

  /**
   * @generated from field: string status = 2;
   */
  status = "";

  /**
   * @generated from field: optional string statusMessage = 3;
   */
  statusMessage?: string;

  /**
   * @generated from field: google.protobuf.Timestamp lastUpdated = 4;
   */
  lastUpdated?: Timestamp;

  /**
   * @generated from field: bool recurring = 5;
   */
  recurring = false;

  constructor(data?: PartialMessage<SnapshotStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "loggingadmin.SnapshotStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ref", kind: "message", T: SnapshotReference },
    { no: 2, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "statusMessage", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "lastUpdated", kind: "message", T: Timestamp },
    { no: 5, name: "recurring", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SnapshotStatus {
    return new SnapshotStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SnapshotStatus {
    return new SnapshotStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SnapshotStatus {
    return new SnapshotStatus().fromJsonString(jsonString, options);
  }

  static equals(a: SnapshotStatus | PlainMessage<SnapshotStatus> | undefined, b: SnapshotStatus | PlainMessage<SnapshotStatus> | undefined): boolean {
    return proto3.util.equals(SnapshotStatus, a, b);
  }
}

