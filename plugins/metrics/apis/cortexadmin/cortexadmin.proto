syntax = "proto3";

package cortexadmin;

import "github.com/open-panoptes/opni/plugins/metrics/apis/cortexadmin/status.proto";
import "google/api/annotations.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/open-panoptes/opni/plugins/metrics/apis/cortexadmin";

// The CortexAdmin service provides authenticated endpoints for internal Cortex APIs.
service CortexAdmin {
  rpc AllUserStats(google.protobuf.Empty) returns (UserIDStatsList) {
    option (google.api.http) = {
      get: "/all_user_stats"
    };
  }
  rpc WriteMetrics(WriteRequest) returns (WriteResponse) {
    option (google.api.http) = {
      post: "/write_metrics"
      body: "*"
    };
  }
  rpc Query(QueryRequest) returns (QueryResponse) {
    option (google.api.http) = {
      get: "/query"
      additional_bindings {
        post: "/query"
        body: "*"
      }
    };
  }
  rpc QueryRange(QueryRangeRequest) returns (QueryResponse) {
    option (google.api.http) = {
      get: "/query_range"
      additional_bindings {
        post: "/query_range"
        body: "*"
      }
    };
  }
  rpc GetRule(GetRuleRequest) returns (QueryResponse) {
    option (google.api.http) = {
      get: "/rules/{namespace}/{groupName}"
    };
  }
  rpc GetMetricMetadata(MetricMetadataRequest) returns (MetricMetadata) {
    option (google.api.http) = {
      get: "/metadata"
    };
  }

  // Heavy-handed API for diagnostics.
  rpc ListRules(ListRulesRequest) returns (ListRulesResponse) {
    option (google.api.http) = {
      get: "/rules"
    };
  }

  rpc LoadRules(LoadRuleRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/rules"
    };
  }
  rpc DeleteRule(DeleteRuleRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/rules/{groupName}"
    };
  }

  rpc FlushBlocks(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/flush_blocks"
    };
  }
  // list all metrics
  rpc GetSeriesMetrics(SeriesRequest) returns (SeriesInfoList) {
    option (google.api.http) = {
      get: "/series/metadata"
    };
  }

  rpc GetMetricLabelSets(LabelRequest) returns (MetricLabels) {
    option (google.api.http) = {
      get: "/series/labels"
    };
  }

  rpc GetCortexStatus(google.protobuf.Empty) returns (CortexStatus) {
    option (google.api.http) = {
      get: "/status"
    };
  }

  rpc GetCortexConfig(ConfigRequest) returns (ConfigResponse) {
    option (google.api.http) = {
      get: "/config"
    };
  }

  rpc ExtractRawSeries(MatcherRequest) returns (QueryResponse) {
    option (google.api.http) = {
      get: "/series/raw"
    };
  }
}

message Cluster {
  string clusterId = 1;
}

message SeriesRequest {
  string tenant = 1;
  string jobId  = 2;
}

message MatcherRequest {
  string tenant    = 1;
  string matchExpr = 2;
}

message LabelRequest {
  string tenant     = 1;
  string jobId      = 2;
  string metricName = 3;
}

message MetricLabels {
  repeated LabelSet items = 1;
}

message LabelSet {
  string          name  = 1;
  repeated string items = 2;
}

message SeriesMetadata {
  string description = 1;
  string type        = 2;
  string unit        = 3;
}

message SeriesInfo {
  string         seriesName = 1;
  SeriesMetadata metadata   = 2;
}

message SeriesInfoList {
  repeated SeriesInfo items = 1;
}

message UserIDStatsList {
  repeated UserIDStats items = 2;
}

message UserIDStats {
  string userID            = 1;
  double ingestionRate     = 2;
  uint64 numSeries         = 3;
  double APIIngestionRate  = 4; // title case to match cortex
  double RuleIngestionRate = 5; // title case to match cortex
}

message WriteRequest {
  string                  clusterID  = 1;
  repeated TimeSeries     timeseries = 2;
  repeated MetricMetadata metadata   = 3;
}

message MetricMetadataRequest {
  repeated string tenants    = 1;
  string          metricName = 2;
}

message WriteResponse {}

message TimeSeries {
  repeated Label    labels    = 1;
  repeated Sample   samples   = 2;
  repeated Exemplar exemplars = 3;
}

message Label {
  string name  = 1;
  string value = 2;
}

message Sample {
  int64  timestampMs = 1;
  double value       = 2;
}

message Exemplar {
  repeated Label labels      = 1;
  double         value       = 2;
  int64          timestampMs = 3;
}

message MetricMetadata {
  enum MetricType {
    UNKNOWN        = 0;
    COUNTER        = 1;
    GAUGE          = 2;
    HISTOGRAM      = 3;
    GAUGEHISTOGRAM = 4;
    SUMMARY        = 5;
    INFO           = 6;
    STATESET       = 7;
  }

  MetricType type             = 1;
  string     metricFamilyName = 2;
  string     help             = 4;
  string     unit             = 5;
}

message QueryRequest {
  repeated string tenants = 1;
  string          query   = 2;
}

message QueryRangeRequest {
  repeated string           tenants = 1;
  string                    query   = 2;
  google.protobuf.Timestamp start   = 3;
  google.protobuf.Timestamp end     = 4;
  google.protobuf.Duration  step    = 5;
}

message QueryResponse {
  bytes data = 2;
}

message ConfigRequest {
  repeated string configModes = 1;
}

message ConfigResponse {
  repeated string configYaml = 4;
}

message LoadRuleRequest {
  string clusterId   = 1;
  string namespace   = 2; // defaults to "default"
  bytes  yamlContent = 3;
}

message DeleteRuleRequest {
  string clusterId = 1;
  string namespace = 2;
  string groupName = 3;
}

message GetRuleRequest {
  string clusterId = 1;
  string namespace = 2;
  string groupName = 3;
}

message ListRulesRequest {
  repeated string clusterId       = 1;
  repeated string ruleType        = 2;
  repeated string healthFilter    = 3;
  repeated string stateFilter     = 4;
  string          ruleNameRegexp  = 5;
  string          groupNameRegexp = 6;
  optional bool   listInvalid     = 7;
  optional bool   requestAll      = 8;
  string          namespaceRegexp = 9;
}

// matches the return of cortex ruler api
// https://github.com/cortexproject/cortex/blob/c0e4545fd26f33ca5cc3323ee48e4c2ccd182b83/pkg/ruler/api.go#L215
message ListRulesResponse {
  string     status = 1;
  RuleGroups data   = 2;
}

message RuleGroups {
  repeated RuleGroup groups = 1;
}

message RuleGroup {
  string        name     = 1;
  string        file     = 2;
  repeated Rule rules    = 3;
  double        interval = 4;
  // Note : string instead of timestamp to preserve compatibility with native prometheus api return value
  string lastEvaluation = 5;
  double evaluationTime = 6;
  // opni specific field
  string clusterId = 7;
}

// combination of alerting and recording rule (alerting rule is a superset of recording)
message Rule {
  string              state       = 1;
  string              name        = 2;
  string              query       = 3;
  double              duration    = 4;
  map<string, string> labels      = 5;
  map<string, string> annotations = 6;
  string              health      = 7;
  repeated Alert      alerts      = 8;
  string              lastError   = 9;
  string              type        = 10;
  // Note : string instead of timestamp to preserve compatibility with native prometheus api return value
  string lastEvaluation = 11;
  double evaluationTime = 12;
}

message Alert {
  map<string, string> labels      = 1;
  map<string, string> annotations = 2;
  string              state       = 3;
  // Note : string instead of timestamp to preserve compatibility with native prometheus api return value
  string activeAt = 4;
  string value    = 5;
}
