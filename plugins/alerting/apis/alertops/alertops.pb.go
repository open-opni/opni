// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v1.0.0
// source: github.com/open-panoptes/opni/plugins/alerting/apis/alertops/alertops.proto

package alertops

import (
	v1 "github.com/open-panoptes/opni/pkg/apis/alerting/v1"
	_ "github.com/open-panoptes/opni/pkg/apis/storage/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SyncState int32

const (
	SyncState_SyncUnknown SyncState = 0
	SyncState_Synced      SyncState = 1
	SyncState_SyncError   SyncState = 2
)

// Enum value maps for SyncState.
var (
	SyncState_name = map[int32]string{
		0: "SyncUnknown",
		1: "Synced",
		2: "SyncError",
	}
	SyncState_value = map[string]int32{
		"SyncUnknown": 0,
		"Synced":      1,
		"SyncError":   2,
	}
)

func (x SyncState) Enum() *SyncState {
	p := new(SyncState)
	*p = x
	return p
}

func (x SyncState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SyncState) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_enumTypes[0].Descriptor()
}

func (SyncState) Type() protoreflect.EnumType {
	return &file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_enumTypes[0]
}

func (x SyncState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SyncState.Descriptor instead.
func (SyncState) EnumDescriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_rawDescGZIP(), []int{0}
}

type InstallState int32

const (
	InstallState_InstallUnknown  InstallState = 0
	InstallState_NotInstalled    InstallState = 1
	InstallState_InstallUpdating InstallState = 2
	InstallState_Installed       InstallState = 3
	InstallState_Uninstalling    InstallState = 4
)

// Enum value maps for InstallState.
var (
	InstallState_name = map[int32]string{
		0: "InstallUnknown",
		1: "NotInstalled",
		2: "InstallUpdating",
		3: "Installed",
		4: "Uninstalling",
	}
	InstallState_value = map[string]int32{
		"InstallUnknown":  0,
		"NotInstalled":    1,
		"InstallUpdating": 2,
		"Installed":       3,
		"Uninstalling":    4,
	}
)

func (x InstallState) Enum() *InstallState {
	p := new(InstallState)
	*p = x
	return p
}

func (x InstallState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstallState) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_enumTypes[1].Descriptor()
}

func (InstallState) Type() protoreflect.EnumType {
	return &file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_enumTypes[1]
}

func (x InstallState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstallState.Descriptor instead.
func (InstallState) EnumDescriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_rawDescGZIP(), []int{1}
}

type ComponentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurSyncId  string                `protobuf:"bytes,2,opt,name=curSyncId,proto3" json:"curSyncId,omitempty"`
	Components map[string]*Component `protobuf:"bytes,3,rep,name=components,proto3" json:"components,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ComponentInfo) Reset() {
	*x = ComponentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComponentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentInfo) ProtoMessage() {}

func (x *ComponentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentInfo.ProtoReflect.Descriptor instead.
func (*ComponentInfo) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_rawDescGZIP(), []int{0}
}

func (x *ComponentInfo) GetCurSyncId() string {
	if x != nil {
		return x.CurSyncId
	}
	return ""
}

func (x *ComponentInfo) GetComponents() map[string]*Component {
	if x != nil {
		return x.Components
	}
	return nil
}

type Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectInfo   *ConnectInfo           `protobuf:"bytes,1,opt,name=connectInfo,proto3" json:"connectInfo,omitempty"`
	LastHandshake *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=lastHandshake,proto3" json:"lastHandshake,omitempty"`
}

func (x *Component) Reset() {
	*x = Component{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Component) ProtoMessage() {}

func (x *Component) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Component.ProtoReflect.Descriptor instead.
func (*Component) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_rawDescGZIP(), []int{1}
}

func (x *Component) GetConnectInfo() *ConnectInfo {
	if x != nil {
		return x.ConnectInfo
	}
	return nil
}

func (x *Component) GetLastHandshake() *timestamppb.Timestamp {
	if x != nil {
		return x.LastHandshake
	}
	return nil
}

type ConnectInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LifecycleUuid string    `protobuf:"bytes,1,opt,name=lifecycleUuid,proto3" json:"lifecycleUuid,omitempty"`
	Whoami        string    `protobuf:"bytes,2,opt,name=whoami,proto3" json:"whoami,omitempty"`
	State         SyncState `protobuf:"varint,3,opt,name=state,proto3,enum=alerting.ops.SyncState" json:"state,omitempty"`
	SyncId        string    `protobuf:"bytes,4,opt,name=syncId,proto3" json:"syncId,omitempty"`
}

func (x *ConnectInfo) Reset() {
	*x = ConnectInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectInfo) ProtoMessage() {}

func (x *ConnectInfo) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectInfo.ProtoReflect.Descriptor instead.
func (*ConnectInfo) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_rawDescGZIP(), []int{2}
}

func (x *ConnectInfo) GetLifecycleUuid() string {
	if x != nil {
		return x.LifecycleUuid
	}
	return ""
}

func (x *ConnectInfo) GetWhoami() string {
	if x != nil {
		return x.Whoami
	}
	return ""
}

func (x *ConnectInfo) GetState() SyncState {
	if x != nil {
		return x.State
	}
	return SyncState_SyncUnknown
}

func (x *ConnectInfo) GetSyncId() string {
	if x != nil {
		return x.SyncId
	}
	return ""
}

type SyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LifecycleId string                 `protobuf:"bytes,1,opt,name=lifecycleId,proto3" json:"lifecycleId,omitempty"`
	SyncId      string                 `protobuf:"bytes,2,opt,name=syncId,proto3" json:"syncId,omitempty"`
	Items       []*v1.PutConfigRequest `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *SyncRequest) Reset() {
	*x = SyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncRequest) ProtoMessage() {}

func (x *SyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncRequest.ProtoReflect.Descriptor instead.
func (*SyncRequest) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_rawDescGZIP(), []int{3}
}

func (x *SyncRequest) GetLifecycleId() string {
	if x != nil {
		return x.LifecycleId
	}
	return ""
}

func (x *SyncRequest) GetSyncId() string {
	if x != nil {
		return x.SyncId
	}
	return ""
}

func (x *SyncRequest) GetItems() []*v1.PutConfigRequest {
	if x != nil {
		return x.Items
	}
	return nil
}

type UninstallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeleteData bool `protobuf:"varint,1,opt,name=deleteData,proto3" json:"deleteData,omitempty"`
}

func (x *UninstallRequest) Reset() {
	*x = UninstallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UninstallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UninstallRequest) ProtoMessage() {}

func (x *UninstallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UninstallRequest.ProtoReflect.Descriptor instead.
func (*UninstallRequest) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_rawDescGZIP(), []int{4}
}

func (x *UninstallRequest) GetDeleteData() bool {
	if x != nil {
		return x.DeleteData
	}
	return false
}

type InstallStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State      InstallState      `protobuf:"varint,1,opt,name=state,proto3,enum=alerting.ops.InstallState" json:"state,omitempty"`
	Version    string            `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Metadata   map[string]string `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Conditions []string          `protobuf:"bytes,4,rep,name=conditions,proto3" json:"conditions,omitempty"`
}

func (x *InstallStatus) Reset() {
	*x = InstallStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallStatus) ProtoMessage() {}

func (x *InstallStatus) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallStatus.ProtoReflect.Descriptor instead.
func (*InstallStatus) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_rawDescGZIP(), []int{5}
}

func (x *InstallStatus) GetState() InstallState {
	if x != nil {
		return x.State
	}
	return InstallState_InstallUnknown
}

func (x *InstallStatus) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *InstallStatus) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *InstallStatus) GetConditions() []string {
	if x != nil {
		return x.Conditions
	}
	return nil
}

type ClusterConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// number of replicas for the opni-alerting (odd-number for HA)
	NumReplicas int32 `protobuf:"varint,2,opt,name=numReplicas,proto3" json:"numReplicas,omitempty"`
	// Maximum time to wait for cluster
	// connections to settle before
	// evaluating notifications.
	ClusterSettleTimeout string `protobuf:"bytes,3,opt,name=clusterSettleTimeout,proto3" json:"clusterSettleTimeout,omitempty"`
	// Interval for gossip state syncs.
	// Setting this interval lower
	// (more frequent) will increase
	// convergence speeds across larger
	// clusters at the expense of
	// increased bandwidth usage.
	ClusterPushPullInterval string `protobuf:"bytes,4,opt,name=clusterPushPullInterval,proto3" json:"clusterPushPullInterval,omitempty"`
	// Interval between sending gossip
	// messages. By lowering this
	// value (more frequent) gossip
	// messages are propagated across
	// the cluster more quickly at the
	// expense of increased bandwidth.
	ClusterGossipInterval string             `protobuf:"bytes,5,opt,name=clusterGossipInterval,proto3" json:"clusterGossipInterval,omitempty"`
	ResourceLimits        *ResourceLimitSpec `protobuf:"bytes,6,opt,name=resourceLimits,proto3" json:"resourceLimits,omitempty"`
}

func (x *ClusterConfiguration) Reset() {
	*x = ClusterConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfiguration) ProtoMessage() {}

func (x *ClusterConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfiguration.ProtoReflect.Descriptor instead.
func (*ClusterConfiguration) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_rawDescGZIP(), []int{6}
}

func (x *ClusterConfiguration) GetNumReplicas() int32 {
	if x != nil {
		return x.NumReplicas
	}
	return 0
}

func (x *ClusterConfiguration) GetClusterSettleTimeout() string {
	if x != nil {
		return x.ClusterSettleTimeout
	}
	return ""
}

func (x *ClusterConfiguration) GetClusterPushPullInterval() string {
	if x != nil {
		return x.ClusterPushPullInterval
	}
	return ""
}

func (x *ClusterConfiguration) GetClusterGossipInterval() string {
	if x != nil {
		return x.ClusterGossipInterval
	}
	return ""
}

func (x *ClusterConfiguration) GetResourceLimits() *ResourceLimitSpec {
	if x != nil {
		return x.ResourceLimits
	}
	return nil
}

type ResourceLimitSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Storage resource limit for alerting volume
	Storage string `protobuf:"bytes,1,opt,name=storage,proto3" json:"storage,omitempty"`
	// CPU resource limit per replica
	Cpu string `protobuf:"bytes,2,opt,name=cpu,proto3" json:"cpu,omitempty"`
	// Memory resource limit per replica
	Memory string `protobuf:"bytes,3,opt,name=memory,proto3" json:"memory,omitempty"`
}

func (x *ResourceLimitSpec) Reset() {
	*x = ResourceLimitSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceLimitSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceLimitSpec) ProtoMessage() {}

func (x *ResourceLimitSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceLimitSpec.ProtoReflect.Descriptor instead.
func (*ResourceLimitSpec) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_rawDescGZIP(), []int{7}
}

func (x *ResourceLimitSpec) GetStorage() string {
	if x != nil {
		return x.Storage
	}
	return ""
}

func (x *ResourceLimitSpec) GetCpu() string {
	if x != nil {
		return x.Cpu
	}
	return ""
}

func (x *ResourceLimitSpec) GetMemory() string {
	if x != nil {
		return x.Memory
	}
	return ""
}

var File_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto protoreflect.FileDescriptor

var file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_rawDesc = []byte{
	0x0a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x6e, 0x69, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x6f, 0x70, 0x73, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x6f, 0x70,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x6f, 0x70, 0x73, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x6e, 0x69, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3a,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x65, 0x72, 0x2f, 0x6f, 0x70, 0x6e, 0x69, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x69, 0x64,
	0x65, 0x63, 0x61, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd2, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x75,
	0x72, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x75, 0x72, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x56, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8a, 0x01,
	0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x70, 0x73, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74,
	0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6c, 0x61, 0x73,
	0x74, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x0b, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x69,
	0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x77, 0x68, 0x6f, 0x61, 0x6d, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x77, 0x68, 0x6f, 0x61, 0x6d, 0x69, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6e, 0x63, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x64, 0x22,
	0x79, 0x0a, 0x0b, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x50, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x32, 0x0a, 0x10, 0x55, 0x6e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0xff,
	0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xa5, 0x02, 0x0a, 0x14, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x75, 0x6d,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x6e, 0x75, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12,
	0x38, 0x0a, 0x17, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x75, 0x73, 0x68, 0x50, 0x75,
	0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x17, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x75, 0x73, 0x68, 0x50, 0x75, 0x6c,
	0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x15, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x47, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x47, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x47, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x22, 0x57, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x2a, 0x37, 0x0a, 0x09, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0f,
	0x0a, 0x0b, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53,
	0x79, 0x6e, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x02, 0x2a, 0x6a, 0x0a, 0x0c, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x10,
	0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x10, 0x01,
	0x12, 0x13, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x65, 0x64, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x10, 0x04, 0x32, 0xbf, 0x04, 0x0a, 0x0d, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x6d, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x22, 0x2e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x65, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x3a,
	0x01, 0x2a, 0x22, 0x0a, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x12, 0x58,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x0f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x09, 0x12,
	0x07, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x52, 0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x10, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0a, 0x22, 0x08, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0x5e, 0x0a, 0x10,
	0x55, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x1e, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x70, 0x73, 0x2e,
	0x55, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x12, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c,
	0x22, 0x0a, 0x2f, 0x75, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0x4a, 0x0a, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x0d, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x07, 0x12, 0x05, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x32, 0x5b, 0x0a, 0x09, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4e, 0x0a, 0x08, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x12, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x12, 0x0a, 0x2f, 0x69, 0x6e, 0x66, 0x6f,
	0x2f, 0x73, 0x79, 0x6e, 0x63, 0x32, 0x5c, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x0a, 0x53, 0x79, 0x6e,
	0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x1a, 0x19, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x70,
	0x73, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x00, 0x28,
	0x01, 0x30, 0x01, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x6e, 0x69, 0x2f, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x6f, 0x70, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_rawDescOnce sync.Once
	file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_rawDescData = file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_rawDesc
)

func file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_rawDescGZIP() []byte {
	file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_rawDescOnce.Do(func() {
		file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_rawDescData)
	})
	return file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_rawDescData
}

var file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_goTypes = []interface{}{
	(SyncState)(0),                // 0: alerting.ops.SyncState
	(InstallState)(0),             // 1: alerting.ops.InstallState
	(*ComponentInfo)(nil),         // 2: alerting.ops.ComponentInfo
	(*Component)(nil),             // 3: alerting.ops.Component
	(*ConnectInfo)(nil),           // 4: alerting.ops.ConnectInfo
	(*SyncRequest)(nil),           // 5: alerting.ops.SyncRequest
	(*UninstallRequest)(nil),      // 6: alerting.ops.UninstallRequest
	(*InstallStatus)(nil),         // 7: alerting.ops.InstallStatus
	(*ClusterConfiguration)(nil),  // 8: alerting.ops.ClusterConfiguration
	(*ResourceLimitSpec)(nil),     // 9: alerting.ops.ResourceLimitSpec
	nil,                           // 10: alerting.ops.ComponentInfo.ComponentsEntry
	nil,                           // 11: alerting.ops.InstallStatus.MetadataEntry
	(*timestamppb.Timestamp)(nil), // 12: google.protobuf.Timestamp
	(*v1.PutConfigRequest)(nil),   // 13: alerting.PutConfigRequest
	(*emptypb.Empty)(nil),         // 14: google.protobuf.Empty
}
var file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_depIdxs = []int32{
	10, // 0: alerting.ops.ComponentInfo.components:type_name -> alerting.ops.ComponentInfo.ComponentsEntry
	4,  // 1: alerting.ops.Component.connectInfo:type_name -> alerting.ops.ConnectInfo
	12, // 2: alerting.ops.Component.lastHandshake:type_name -> google.protobuf.Timestamp
	0,  // 3: alerting.ops.ConnectInfo.state:type_name -> alerting.ops.SyncState
	13, // 4: alerting.ops.SyncRequest.items:type_name -> alerting.PutConfigRequest
	1,  // 5: alerting.ops.InstallStatus.state:type_name -> alerting.ops.InstallState
	11, // 6: alerting.ops.InstallStatus.metadata:type_name -> alerting.ops.InstallStatus.MetadataEntry
	9,  // 7: alerting.ops.ClusterConfiguration.resourceLimits:type_name -> alerting.ops.ResourceLimitSpec
	3,  // 8: alerting.ops.ComponentInfo.ComponentsEntry.value:type_name -> alerting.ops.Component
	14, // 9: alerting.ops.AlertingAdmin.GetClusterConfiguration:input_type -> google.protobuf.Empty
	8,  // 10: alerting.ops.AlertingAdmin.ConfigureCluster:input_type -> alerting.ops.ClusterConfiguration
	14, // 11: alerting.ops.AlertingAdmin.GetClusterStatus:input_type -> google.protobuf.Empty
	14, // 12: alerting.ops.AlertingAdmin.InstallCluster:input_type -> google.protobuf.Empty
	6,  // 13: alerting.ops.AlertingAdmin.UninstallCluster:input_type -> alerting.ops.UninstallRequest
	14, // 14: alerting.ops.AlertingAdmin.Info:input_type -> google.protobuf.Empty
	14, // 15: alerting.ops.AdminInfo.SyncInfo:input_type -> google.protobuf.Empty
	4,  // 16: alerting.ops.ConfigReconciler.SyncConfig:input_type -> alerting.ops.ConnectInfo
	8,  // 17: alerting.ops.AlertingAdmin.GetClusterConfiguration:output_type -> alerting.ops.ClusterConfiguration
	14, // 18: alerting.ops.AlertingAdmin.ConfigureCluster:output_type -> google.protobuf.Empty
	7,  // 19: alerting.ops.AlertingAdmin.GetClusterStatus:output_type -> alerting.ops.InstallStatus
	14, // 20: alerting.ops.AlertingAdmin.InstallCluster:output_type -> google.protobuf.Empty
	14, // 21: alerting.ops.AlertingAdmin.UninstallCluster:output_type -> google.protobuf.Empty
	2,  // 22: alerting.ops.AlertingAdmin.Info:output_type -> alerting.ops.ComponentInfo
	14, // 23: alerting.ops.AdminInfo.SyncInfo:output_type -> google.protobuf.Empty
	5,  // 24: alerting.ops.ConfigReconciler.SyncConfig:output_type -> alerting.ops.SyncRequest
	17, // [17:25] is the sub-list for method output_type
	9,  // [9:17] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_init() }
func file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_init() {
	if File_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComponentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Component); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UninstallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceLimitSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_goTypes,
		DependencyIndexes: file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_depIdxs,
		EnumInfos:         file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_enumTypes,
		MessageInfos:      file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_msgTypes,
	}.Build()
	File_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto = out.File
	file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_rawDesc = nil
	file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_goTypes = nil
	file_github_com_rancher_opni_plugins_alerting_apis_alertops_alertops_proto_depIdxs = nil
}
