syntax = "proto3";

package alerting.ops;

import "github.com/open-panoptes/opni/pkg/apis/alerting/v1/sidecar.proto";
import "github.com/open-panoptes/opni/pkg/apis/storage/v1/storage.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/open-panoptes/opni/plugins/alerting/apis/alertops";

// The AlertingAdmin service controls meta-operations for
// deploying, connecting & configuring AlertManager in the upstream environment
service AlertingAdmin {
  rpc GetClusterConfiguration(google.protobuf.Empty) returns (ClusterConfiguration) {
    option (google.api.http) = {
      get: "/configuration"
    };
  }
  // Install/Uninstall the alerting cluster by setting enabled=true/false
  rpc ConfigureCluster(ClusterConfiguration) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/configure"
      body: "*"
    };
  }
  rpc GetClusterStatus(google.protobuf.Empty) returns (InstallStatus) {
    option (google.api.http) = {
      get: "/status"
    };
  }

  rpc InstallCluster(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/install"
    };
  }
  rpc UninstallCluster(UninstallRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/uninstall"
    };
  }

  rpc Info(google.protobuf.Empty) returns (ComponentInfo) {
    option (google.api.http) = {
      get: "/info"
    };
  }
}

service AdminInfo {
  rpc SyncInfo(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      get: "/info/sync"
    };
  }
}

service ConfigReconciler {
  rpc SyncConfig(stream ConnectInfo) returns (stream SyncRequest);
}

message ComponentInfo {
  string                 curSyncId  = 2;
  map<string, Component> components = 3;
}

message Component {
  ConnectInfo               connectInfo   = 1;
  google.protobuf.Timestamp lastHandshake = 2;
}

message ConnectInfo {
  string    lifecycleUuid = 1;
  string    whoami        = 2;
  SyncState state         = 3;
  string    syncId        = 4;
}

enum SyncState {
  SyncUnknown = 0;
  Synced      = 1;
  SyncError   = 2;
}

message SyncRequest {
  string                             lifecycleId = 1;
  string                             syncId      = 2;
  repeated alerting.PutConfigRequest items       = 3;
}

message UninstallRequest {
  bool deleteData = 1;
}

enum InstallState {
  InstallUnknown  = 0;
  NotInstalled    = 1;
  InstallUpdating = 2;
  Installed       = 3;
  Uninstalling    = 4;
}

message InstallStatus {
  InstallState        state      = 1;
  string              version    = 2;
  map<string, string> metadata   = 3;
  repeated string     conditions = 4;
}

message ClusterConfiguration {
  // number of replicas for the opni-alerting (odd-number for HA)
  int32 numReplicas = 2;

  // Maximum time to wait for cluster
  // connections to settle before
  // evaluating notifications.
  string clusterSettleTimeout = 3;
  // Interval for gossip state syncs.
  // Setting this interval lower
  // (more frequent) will increase
  // convergence speeds across larger
  // clusters at the expense of
  // increased bandwidth usage.
  string clusterPushPullInterval = 4;
  // Interval between sending gossip
  // messages. By lowering this
  // value (more frequent) gossip
  // messages are propagated across
  // the cluster more quickly at the
  // expense of increased bandwidth.
  string clusterGossipInterval = 5;

  ResourceLimitSpec resourceLimits = 6;
}

message ResourceLimitSpec {
  // Storage resource limit for alerting volume
  string storage = 1;
  // CPU resource limit per replica
  string cpu = 2;
  // Memory resource limit per replica
  string memory = 3;
}
