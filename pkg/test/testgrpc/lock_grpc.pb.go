// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - ragu               v1.0.0
// source: github.com/rancher/opni/pkg/test/testgrpc/lock.proto

package testgrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TestLocker_Lock_FullMethodName      = "/test.lock.TestLocker/Lock"
	TestLocker_TryLock_FullMethodName   = "/test.lock.TestLocker/TryLock"
	TestLocker_ListLocks_FullMethodName = "/test.lock.TestLocker/ListLocks"
	TestLocker_Unlock_FullMethodName    = "/test.lock.TestLocker/Unlock"
)

// TestLockerClient is the client API for TestLocker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestLockerClient interface {
	Lock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*LockResponse, error)
	TryLock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*LockResponse, error)
	ListLocks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListLocksResponse, error)
	Unlock(ctx context.Context, in *UnlockRequest, opts ...grpc.CallOption) (*UnlockResponse, error)
}

type testLockerClient struct {
	cc grpc.ClientConnInterface
}

func NewTestLockerClient(cc grpc.ClientConnInterface) TestLockerClient {
	return &testLockerClient{cc}
}

func (c *testLockerClient) Lock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*LockResponse, error) {
	out := new(LockResponse)
	err := c.cc.Invoke(ctx, TestLocker_Lock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testLockerClient) TryLock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*LockResponse, error) {
	out := new(LockResponse)
	err := c.cc.Invoke(ctx, TestLocker_TryLock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testLockerClient) ListLocks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListLocksResponse, error) {
	out := new(ListLocksResponse)
	err := c.cc.Invoke(ctx, TestLocker_ListLocks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testLockerClient) Unlock(ctx context.Context, in *UnlockRequest, opts ...grpc.CallOption) (*UnlockResponse, error) {
	out := new(UnlockResponse)
	err := c.cc.Invoke(ctx, TestLocker_Unlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestLockerServer is the server API for TestLocker service.
// All implementations should embed UnimplementedTestLockerServer
// for forward compatibility
type TestLockerServer interface {
	Lock(context.Context, *LockRequest) (*LockResponse, error)
	TryLock(context.Context, *LockRequest) (*LockResponse, error)
	ListLocks(context.Context, *emptypb.Empty) (*ListLocksResponse, error)
	Unlock(context.Context, *UnlockRequest) (*UnlockResponse, error)
}

// UnimplementedTestLockerServer should be embedded to have forward compatible implementations.
type UnimplementedTestLockerServer struct {
}

func (UnimplementedTestLockerServer) Lock(context.Context, *LockRequest) (*LockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lock not implemented")
}
func (UnimplementedTestLockerServer) TryLock(context.Context, *LockRequest) (*LockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TryLock not implemented")
}
func (UnimplementedTestLockerServer) ListLocks(context.Context, *emptypb.Empty) (*ListLocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLocks not implemented")
}
func (UnimplementedTestLockerServer) Unlock(context.Context, *UnlockRequest) (*UnlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unlock not implemented")
}

// UnsafeTestLockerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestLockerServer will
// result in compilation errors.
type UnsafeTestLockerServer interface {
	mustEmbedUnimplementedTestLockerServer()
}

func RegisterTestLockerServer(s grpc.ServiceRegistrar, srv TestLockerServer) {
	s.RegisterService(&TestLocker_ServiceDesc, srv)
}

func _TestLocker_Lock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestLockerServer).Lock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestLocker_Lock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestLockerServer).Lock(ctx, req.(*LockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestLocker_TryLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestLockerServer).TryLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestLocker_TryLock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestLockerServer).TryLock(ctx, req.(*LockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestLocker_ListLocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestLockerServer).ListLocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestLocker_ListLocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestLockerServer).ListLocks(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestLocker_Unlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestLockerServer).Unlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestLocker_Unlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestLockerServer).Unlock(ctx, req.(*UnlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TestLocker_ServiceDesc is the grpc.ServiceDesc for TestLocker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestLocker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "test.lock.TestLocker",
	HandlerType: (*TestLockerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Lock",
			Handler:    _TestLocker_Lock_Handler,
		},
		{
			MethodName: "TryLock",
			Handler:    _TestLocker_TryLock_Handler,
		},
		{
			MethodName: "ListLocks",
			Handler:    _TestLocker_ListLocks_Handler,
		},
		{
			MethodName: "Unlock",
			Handler:    _TestLocker_Unlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/rancher/opni/pkg/test/testgrpc/lock.proto",
}
