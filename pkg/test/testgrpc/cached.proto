syntax = "proto3";

package testgrpc.cached;

import "google/protobuf/empty.proto";

option go_package = "github.com/open-panoptes/opni/pkg/test/testgrpc";

service SimpleService {
  rpc Increment(IncrementRequest) returns (google.protobuf.Empty);
  rpc GetValue(google.protobuf.Empty) returns (Value);
  rpc GetValueWithForcedClientCaching(google.protobuf.Empty) returns (Value);
}

service ObjectService {
  // Adds the value to the an arbitrary server-side object.
  // If the object doesn't exist create a new one and it set it to the value.
  rpc IncrementObject(IncrementObjectRequest) returns (google.protobuf.Empty);
  rpc GetObjectValue(ObjectReference) returns (Value);
  rpc List(google.protobuf.Empty) returns (ObjectList);
}

// makes remote calls to SimpleService and ObjectService
service AggregatorService {
  // Increments the global value and all object values by 1,
  // by making nested RPC calls.
  // returns an aggregate value of all other values.
  rpc IncrementAll(IncrementRequest) returns (google.protobuf.Empty);
  // returns sum of all values
  rpc GetAll(google.protobuf.Empty) returns (Value);
  rpc GetAllWithNestedCaching(google.protobuf.Empty) returns (Value);
}

message RefreshRequest {
  bool refresh = 1;
}

// ObjectReference must implement the `CacheKeyer` interface
message ObjectReference {
  string id = 1;
}

message ObjectList {
  repeated ObjectReference items = 1;
}

message IncrementRequest {
  int64 value = 1;
}

message IncrementObjectRequest {
  ObjectReference id    = 1;
  int64           value = 2;
}

message Value {
  int64 value = 1;
}
