// Code generated by cli_gen.go DO NOT EDIT.
// source: github.com/rancher/opni/pkg/test/testgrpc/lock.proto

package testgrpc

import (
	context "context"
	errors "errors"
	cli "github.com/rancher/opni/internal/codegen/cli"
	cliutil "github.com/rancher/opni/pkg/opni/cliutil"
	flagutil "github.com/rancher/opni/pkg/util/flagutil"
	cobra "github.com/spf13/cobra"
	pflag "github.com/spf13/pflag"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	strings "strings"
)

type contextKey_TestLocker_type struct{}

var contextKey_TestLocker contextKey_TestLocker_type

func ContextWithTestLockerClient(ctx context.Context, client TestLockerClient) context.Context {
	return context.WithValue(ctx, contextKey_TestLocker, client)
}

func TestLockerClientFromContext(ctx context.Context) (TestLockerClient, bool) {
	client, ok := ctx.Value(contextKey_TestLocker).(TestLockerClient)
	return client, ok
}

var extraCmds_TestLocker []*cobra.Command

func addExtraTestLockerCmd(custom *cobra.Command) {
	extraCmds_TestLocker = append(extraCmds_TestLocker, custom)
}

func BuildTestLockerCmd() *cobra.Command {
	cmd := &cobra.Command{
		Use:               "test-locker",
		Short:             ``,
		Args:              cobra.NoArgs,
		ValidArgsFunction: cobra.NoFileCompletions,
	}

	cliutil.AddSubcommands(cmd, append([]*cobra.Command{
		BuildTestLockerLockCmd(),
		BuildTestLockerTryLockCmd(),
		BuildTestLockerListLocksCmd(),
		BuildTestLockerUnlockCmd(),
	}, extraCmds_TestLocker...)...)
	cli.AddOutputFlag(cmd)
	return cmd
}

func BuildTestLockerLockCmd() *cobra.Command {
	in := &LockRequest{}
	cmd := &cobra.Command{
		Use:               "lock",
		Short:             "",
		Args:              cobra.NoArgs,
		ValidArgsFunction: cobra.NoFileCompletions,
		RunE: func(cmd *cobra.Command, args []string) error {
			client, ok := TestLockerClientFromContext(cmd.Context())
			if !ok {
				cmd.PrintErrln("failed to get client from context")
				return nil
			}
			if in == nil {
				return errors.New("no input provided")
			}
			response, err := client.Lock(cmd.Context(), in)
			if err != nil {
				return err
			}
			cli.RenderOutput(cmd, response)
			return nil
		},
	}
	cmd.Flags().AddFlagSet(in.FlagSet())
	return cmd
}

func BuildTestLockerTryLockCmd() *cobra.Command {
	in := &LockRequest{}
	cmd := &cobra.Command{
		Use:               "try-lock",
		Short:             "",
		Args:              cobra.NoArgs,
		ValidArgsFunction: cobra.NoFileCompletions,
		RunE: func(cmd *cobra.Command, args []string) error {
			client, ok := TestLockerClientFromContext(cmd.Context())
			if !ok {
				cmd.PrintErrln("failed to get client from context")
				return nil
			}
			if in == nil {
				return errors.New("no input provided")
			}
			response, err := client.TryLock(cmd.Context(), in)
			if err != nil {
				return err
			}
			cli.RenderOutput(cmd, response)
			return nil
		},
	}
	cmd.Flags().AddFlagSet(in.FlagSet())
	return cmd
}

func BuildTestLockerListLocksCmd() *cobra.Command {
	cmd := &cobra.Command{
		Use:               "list-locks",
		Short:             "",
		Args:              cobra.NoArgs,
		ValidArgsFunction: cobra.NoFileCompletions,
		RunE: func(cmd *cobra.Command, args []string) error {
			client, ok := TestLockerClientFromContext(cmd.Context())
			if !ok {
				cmd.PrintErrln("failed to get client from context")
				return nil
			}
			response, err := client.ListLocks(cmd.Context(), &emptypb.Empty{})
			if err != nil {
				return err
			}
			cli.RenderOutput(cmd, response)
			return nil
		},
	}
	return cmd
}

func BuildTestLockerUnlockCmd() *cobra.Command {
	in := &UnlockRequest{}
	cmd := &cobra.Command{
		Use:               "unlock",
		Short:             "",
		Args:              cobra.NoArgs,
		ValidArgsFunction: cobra.NoFileCompletions,
		RunE: func(cmd *cobra.Command, args []string) error {
			client, ok := TestLockerClientFromContext(cmd.Context())
			if !ok {
				cmd.PrintErrln("failed to get client from context")
				return nil
			}
			if in == nil {
				return errors.New("no input provided")
			}
			response, err := client.Unlock(cmd.Context(), in)
			if err != nil {
				return err
			}
			cli.RenderOutput(cmd, response)
			return nil
		},
	}
	cmd.Flags().AddFlagSet(in.FlagSet())
	return cmd
}

func (in *LockRequest) FlagSet(prefix ...string) *pflag.FlagSet {
	fs := pflag.NewFlagSet("LockRequest", pflag.ExitOnError)
	fs.SortFlags = true
	fs.StringVar(&in.Key, strings.Join(append(prefix, "key"), "."), "", "")
	fs.Var(flagutil.DurationpbValue(nil, &in.Dur), strings.Join(append(prefix, "dur"), "."), "")
	return fs
}

func (in *UnlockRequest) FlagSet(prefix ...string) *pflag.FlagSet {
	fs := pflag.NewFlagSet("UnlockRequest", pflag.ExitOnError)
	fs.SortFlags = true
	fs.StringVar(&in.Key, strings.Join(append(prefix, "key"), "."), "", "")
	return fs
}
