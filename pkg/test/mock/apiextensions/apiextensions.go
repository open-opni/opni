// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/plugins/apis/apiextensions/apiextensions_grpc.pb.go

// Package mock_apiextensions is a generated GoMock package.
package mock_apiextensions

import (
	context "context"
	reflect "reflect"

	totem "github.com/kralicky/totem"
	apiextensions "github.com/open-panoptes/opni/pkg/plugins/apis/apiextensions"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockManagementAPIExtensionClient is a mock of ManagementAPIExtensionClient interface.
type MockManagementAPIExtensionClient struct {
	ctrl     *gomock.Controller
	recorder *MockManagementAPIExtensionClientMockRecorder
}

// MockManagementAPIExtensionClientMockRecorder is the mock recorder for MockManagementAPIExtensionClient.
type MockManagementAPIExtensionClientMockRecorder struct {
	mock *MockManagementAPIExtensionClient
}

// NewMockManagementAPIExtensionClient creates a new mock instance.
func NewMockManagementAPIExtensionClient(ctrl *gomock.Controller) *MockManagementAPIExtensionClient {
	mock := &MockManagementAPIExtensionClient{ctrl: ctrl}
	mock.recorder = &MockManagementAPIExtensionClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagementAPIExtensionClient) EXPECT() *MockManagementAPIExtensionClientMockRecorder {
	return m.recorder
}

// Descriptors mocks base method.
func (m *MockManagementAPIExtensionClient) Descriptors(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*apiextensions.ServiceDescriptorProtoList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Descriptors", varargs...)
	ret0, _ := ret[0].(*apiextensions.ServiceDescriptorProtoList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Descriptors indicates an expected call of Descriptors.
func (mr *MockManagementAPIExtensionClientMockRecorder) Descriptors(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Descriptors", reflect.TypeOf((*MockManagementAPIExtensionClient)(nil).Descriptors), varargs...)
}

// MockManagementAPIExtensionServer is a mock of ManagementAPIExtensionServer interface.
type MockManagementAPIExtensionServer struct {
	ctrl     *gomock.Controller
	recorder *MockManagementAPIExtensionServerMockRecorder
}

// MockManagementAPIExtensionServerMockRecorder is the mock recorder for MockManagementAPIExtensionServer.
type MockManagementAPIExtensionServerMockRecorder struct {
	mock *MockManagementAPIExtensionServer
}

// NewMockManagementAPIExtensionServer creates a new mock instance.
func NewMockManagementAPIExtensionServer(ctrl *gomock.Controller) *MockManagementAPIExtensionServer {
	mock := &MockManagementAPIExtensionServer{ctrl: ctrl}
	mock.recorder = &MockManagementAPIExtensionServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagementAPIExtensionServer) EXPECT() *MockManagementAPIExtensionServerMockRecorder {
	return m.recorder
}

// Descriptors mocks base method.
func (m *MockManagementAPIExtensionServer) Descriptors(arg0 context.Context, arg1 *emptypb.Empty) (*apiextensions.ServiceDescriptorProtoList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Descriptors", arg0, arg1)
	ret0, _ := ret[0].(*apiextensions.ServiceDescriptorProtoList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Descriptors indicates an expected call of Descriptors.
func (mr *MockManagementAPIExtensionServerMockRecorder) Descriptors(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Descriptors", reflect.TypeOf((*MockManagementAPIExtensionServer)(nil).Descriptors), arg0, arg1)
}

// mustEmbedUnimplementedManagementAPIExtensionServer mocks base method.
func (m *MockManagementAPIExtensionServer) mustEmbedUnimplementedManagementAPIExtensionServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedManagementAPIExtensionServer")
}

// mustEmbedUnimplementedManagementAPIExtensionServer indicates an expected call of mustEmbedUnimplementedManagementAPIExtensionServer.
func (mr *MockManagementAPIExtensionServerMockRecorder) mustEmbedUnimplementedManagementAPIExtensionServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedManagementAPIExtensionServer", reflect.TypeOf((*MockManagementAPIExtensionServer)(nil).mustEmbedUnimplementedManagementAPIExtensionServer))
}

// MockUnsafeManagementAPIExtensionServer is a mock of UnsafeManagementAPIExtensionServer interface.
type MockUnsafeManagementAPIExtensionServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeManagementAPIExtensionServerMockRecorder
}

// MockUnsafeManagementAPIExtensionServerMockRecorder is the mock recorder for MockUnsafeManagementAPIExtensionServer.
type MockUnsafeManagementAPIExtensionServerMockRecorder struct {
	mock *MockUnsafeManagementAPIExtensionServer
}

// NewMockUnsafeManagementAPIExtensionServer creates a new mock instance.
func NewMockUnsafeManagementAPIExtensionServer(ctrl *gomock.Controller) *MockUnsafeManagementAPIExtensionServer {
	mock := &MockUnsafeManagementAPIExtensionServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeManagementAPIExtensionServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeManagementAPIExtensionServer) EXPECT() *MockUnsafeManagementAPIExtensionServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedManagementAPIExtensionServer mocks base method.
func (m *MockUnsafeManagementAPIExtensionServer) mustEmbedUnimplementedManagementAPIExtensionServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedManagementAPIExtensionServer")
}

// mustEmbedUnimplementedManagementAPIExtensionServer indicates an expected call of mustEmbedUnimplementedManagementAPIExtensionServer.
func (mr *MockUnsafeManagementAPIExtensionServerMockRecorder) mustEmbedUnimplementedManagementAPIExtensionServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedManagementAPIExtensionServer", reflect.TypeOf((*MockUnsafeManagementAPIExtensionServer)(nil).mustEmbedUnimplementedManagementAPIExtensionServer))
}

// MockHTTPAPIExtensionClient is a mock of HTTPAPIExtensionClient interface.
type MockHTTPAPIExtensionClient struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPAPIExtensionClientMockRecorder
}

// MockHTTPAPIExtensionClientMockRecorder is the mock recorder for MockHTTPAPIExtensionClient.
type MockHTTPAPIExtensionClientMockRecorder struct {
	mock *MockHTTPAPIExtensionClient
}

// NewMockHTTPAPIExtensionClient creates a new mock instance.
func NewMockHTTPAPIExtensionClient(ctrl *gomock.Controller) *MockHTTPAPIExtensionClient {
	mock := &MockHTTPAPIExtensionClient{ctrl: ctrl}
	mock.recorder = &MockHTTPAPIExtensionClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPAPIExtensionClient) EXPECT() *MockHTTPAPIExtensionClientMockRecorder {
	return m.recorder
}

// Configure mocks base method.
func (m *MockHTTPAPIExtensionClient) Configure(ctx context.Context, in *apiextensions.CertConfig, opts ...grpc.CallOption) (*apiextensions.HTTPAPIExtensionConfig, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Configure", varargs...)
	ret0, _ := ret[0].(*apiextensions.HTTPAPIExtensionConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Configure indicates an expected call of Configure.
func (mr *MockHTTPAPIExtensionClientMockRecorder) Configure(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockHTTPAPIExtensionClient)(nil).Configure), varargs...)
}

// MockHTTPAPIExtensionServer is a mock of HTTPAPIExtensionServer interface.
type MockHTTPAPIExtensionServer struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPAPIExtensionServerMockRecorder
}

// MockHTTPAPIExtensionServerMockRecorder is the mock recorder for MockHTTPAPIExtensionServer.
type MockHTTPAPIExtensionServerMockRecorder struct {
	mock *MockHTTPAPIExtensionServer
}

// NewMockHTTPAPIExtensionServer creates a new mock instance.
func NewMockHTTPAPIExtensionServer(ctrl *gomock.Controller) *MockHTTPAPIExtensionServer {
	mock := &MockHTTPAPIExtensionServer{ctrl: ctrl}
	mock.recorder = &MockHTTPAPIExtensionServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPAPIExtensionServer) EXPECT() *MockHTTPAPIExtensionServerMockRecorder {
	return m.recorder
}

// Configure mocks base method.
func (m *MockHTTPAPIExtensionServer) Configure(arg0 context.Context, arg1 *apiextensions.CertConfig) (*apiextensions.HTTPAPIExtensionConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Configure", arg0, arg1)
	ret0, _ := ret[0].(*apiextensions.HTTPAPIExtensionConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Configure indicates an expected call of Configure.
func (mr *MockHTTPAPIExtensionServerMockRecorder) Configure(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockHTTPAPIExtensionServer)(nil).Configure), arg0, arg1)
}

// mustEmbedUnimplementedHTTPAPIExtensionServer mocks base method.
func (m *MockHTTPAPIExtensionServer) mustEmbedUnimplementedHTTPAPIExtensionServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedHTTPAPIExtensionServer")
}

// mustEmbedUnimplementedHTTPAPIExtensionServer indicates an expected call of mustEmbedUnimplementedHTTPAPIExtensionServer.
func (mr *MockHTTPAPIExtensionServerMockRecorder) mustEmbedUnimplementedHTTPAPIExtensionServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedHTTPAPIExtensionServer", reflect.TypeOf((*MockHTTPAPIExtensionServer)(nil).mustEmbedUnimplementedHTTPAPIExtensionServer))
}

// MockUnsafeHTTPAPIExtensionServer is a mock of UnsafeHTTPAPIExtensionServer interface.
type MockUnsafeHTTPAPIExtensionServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeHTTPAPIExtensionServerMockRecorder
}

// MockUnsafeHTTPAPIExtensionServerMockRecorder is the mock recorder for MockUnsafeHTTPAPIExtensionServer.
type MockUnsafeHTTPAPIExtensionServerMockRecorder struct {
	mock *MockUnsafeHTTPAPIExtensionServer
}

// NewMockUnsafeHTTPAPIExtensionServer creates a new mock instance.
func NewMockUnsafeHTTPAPIExtensionServer(ctrl *gomock.Controller) *MockUnsafeHTTPAPIExtensionServer {
	mock := &MockUnsafeHTTPAPIExtensionServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeHTTPAPIExtensionServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeHTTPAPIExtensionServer) EXPECT() *MockUnsafeHTTPAPIExtensionServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedHTTPAPIExtensionServer mocks base method.
func (m *MockUnsafeHTTPAPIExtensionServer) mustEmbedUnimplementedHTTPAPIExtensionServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedHTTPAPIExtensionServer")
}

// mustEmbedUnimplementedHTTPAPIExtensionServer indicates an expected call of mustEmbedUnimplementedHTTPAPIExtensionServer.
func (mr *MockUnsafeHTTPAPIExtensionServerMockRecorder) mustEmbedUnimplementedHTTPAPIExtensionServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedHTTPAPIExtensionServer", reflect.TypeOf((*MockUnsafeHTTPAPIExtensionServer)(nil).mustEmbedUnimplementedHTTPAPIExtensionServer))
}

// MockStreamAPIExtensionClient is a mock of StreamAPIExtensionClient interface.
type MockStreamAPIExtensionClient struct {
	ctrl     *gomock.Controller
	recorder *MockStreamAPIExtensionClientMockRecorder
}

// MockStreamAPIExtensionClientMockRecorder is the mock recorder for MockStreamAPIExtensionClient.
type MockStreamAPIExtensionClientMockRecorder struct {
	mock *MockStreamAPIExtensionClient
}

// NewMockStreamAPIExtensionClient creates a new mock instance.
func NewMockStreamAPIExtensionClient(ctrl *gomock.Controller) *MockStreamAPIExtensionClient {
	mock := &MockStreamAPIExtensionClient{ctrl: ctrl}
	mock.recorder = &MockStreamAPIExtensionClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamAPIExtensionClient) EXPECT() *MockStreamAPIExtensionClientMockRecorder {
	return m.recorder
}

// ConnectInternal mocks base method.
func (m *MockStreamAPIExtensionClient) ConnectInternal(ctx context.Context, opts ...grpc.CallOption) (apiextensions.StreamAPIExtension_ConnectInternalClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConnectInternal", varargs...)
	ret0, _ := ret[0].(apiextensions.StreamAPIExtension_ConnectInternalClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConnectInternal indicates an expected call of ConnectInternal.
func (mr *MockStreamAPIExtensionClientMockRecorder) ConnectInternal(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectInternal", reflect.TypeOf((*MockStreamAPIExtensionClient)(nil).ConnectInternal), varargs...)
}

// MockStreamAPIExtension_ConnectInternalClient is a mock of StreamAPIExtension_ConnectInternalClient interface.
type MockStreamAPIExtension_ConnectInternalClient struct {
	ctrl     *gomock.Controller
	recorder *MockStreamAPIExtension_ConnectInternalClientMockRecorder
}

// MockStreamAPIExtension_ConnectInternalClientMockRecorder is the mock recorder for MockStreamAPIExtension_ConnectInternalClient.
type MockStreamAPIExtension_ConnectInternalClientMockRecorder struct {
	mock *MockStreamAPIExtension_ConnectInternalClient
}

// NewMockStreamAPIExtension_ConnectInternalClient creates a new mock instance.
func NewMockStreamAPIExtension_ConnectInternalClient(ctrl *gomock.Controller) *MockStreamAPIExtension_ConnectInternalClient {
	mock := &MockStreamAPIExtension_ConnectInternalClient{ctrl: ctrl}
	mock.recorder = &MockStreamAPIExtension_ConnectInternalClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamAPIExtension_ConnectInternalClient) EXPECT() *MockStreamAPIExtension_ConnectInternalClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockStreamAPIExtension_ConnectInternalClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockStreamAPIExtension_ConnectInternalClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockStreamAPIExtension_ConnectInternalClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockStreamAPIExtension_ConnectInternalClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockStreamAPIExtension_ConnectInternalClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockStreamAPIExtension_ConnectInternalClient)(nil).Context))
}

// Header mocks base method.
func (m *MockStreamAPIExtension_ConnectInternalClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockStreamAPIExtension_ConnectInternalClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockStreamAPIExtension_ConnectInternalClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockStreamAPIExtension_ConnectInternalClient) Recv() (*totem.RPC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*totem.RPC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockStreamAPIExtension_ConnectInternalClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockStreamAPIExtension_ConnectInternalClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockStreamAPIExtension_ConnectInternalClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockStreamAPIExtension_ConnectInternalClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockStreamAPIExtension_ConnectInternalClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockStreamAPIExtension_ConnectInternalClient) Send(arg0 *totem.RPC) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockStreamAPIExtension_ConnectInternalClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockStreamAPIExtension_ConnectInternalClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockStreamAPIExtension_ConnectInternalClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockStreamAPIExtension_ConnectInternalClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockStreamAPIExtension_ConnectInternalClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockStreamAPIExtension_ConnectInternalClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockStreamAPIExtension_ConnectInternalClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockStreamAPIExtension_ConnectInternalClient)(nil).Trailer))
}

// MockStreamAPIExtensionServer is a mock of StreamAPIExtensionServer interface.
type MockStreamAPIExtensionServer struct {
	ctrl     *gomock.Controller
	recorder *MockStreamAPIExtensionServerMockRecorder
}

// MockStreamAPIExtensionServerMockRecorder is the mock recorder for MockStreamAPIExtensionServer.
type MockStreamAPIExtensionServerMockRecorder struct {
	mock *MockStreamAPIExtensionServer
}

// NewMockStreamAPIExtensionServer creates a new mock instance.
func NewMockStreamAPIExtensionServer(ctrl *gomock.Controller) *MockStreamAPIExtensionServer {
	mock := &MockStreamAPIExtensionServer{ctrl: ctrl}
	mock.recorder = &MockStreamAPIExtensionServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamAPIExtensionServer) EXPECT() *MockStreamAPIExtensionServerMockRecorder {
	return m.recorder
}

// ConnectInternal mocks base method.
func (m *MockStreamAPIExtensionServer) ConnectInternal(arg0 apiextensions.StreamAPIExtension_ConnectInternalServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectInternal", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConnectInternal indicates an expected call of ConnectInternal.
func (mr *MockStreamAPIExtensionServerMockRecorder) ConnectInternal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectInternal", reflect.TypeOf((*MockStreamAPIExtensionServer)(nil).ConnectInternal), arg0)
}

// mustEmbedUnimplementedStreamAPIExtensionServer mocks base method.
func (m *MockStreamAPIExtensionServer) mustEmbedUnimplementedStreamAPIExtensionServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedStreamAPIExtensionServer")
}

// mustEmbedUnimplementedStreamAPIExtensionServer indicates an expected call of mustEmbedUnimplementedStreamAPIExtensionServer.
func (mr *MockStreamAPIExtensionServerMockRecorder) mustEmbedUnimplementedStreamAPIExtensionServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedStreamAPIExtensionServer", reflect.TypeOf((*MockStreamAPIExtensionServer)(nil).mustEmbedUnimplementedStreamAPIExtensionServer))
}

// MockUnsafeStreamAPIExtensionServer is a mock of UnsafeStreamAPIExtensionServer interface.
type MockUnsafeStreamAPIExtensionServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeStreamAPIExtensionServerMockRecorder
}

// MockUnsafeStreamAPIExtensionServerMockRecorder is the mock recorder for MockUnsafeStreamAPIExtensionServer.
type MockUnsafeStreamAPIExtensionServerMockRecorder struct {
	mock *MockUnsafeStreamAPIExtensionServer
}

// NewMockUnsafeStreamAPIExtensionServer creates a new mock instance.
func NewMockUnsafeStreamAPIExtensionServer(ctrl *gomock.Controller) *MockUnsafeStreamAPIExtensionServer {
	mock := &MockUnsafeStreamAPIExtensionServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeStreamAPIExtensionServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeStreamAPIExtensionServer) EXPECT() *MockUnsafeStreamAPIExtensionServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedStreamAPIExtensionServer mocks base method.
func (m *MockUnsafeStreamAPIExtensionServer) mustEmbedUnimplementedStreamAPIExtensionServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedStreamAPIExtensionServer")
}

// mustEmbedUnimplementedStreamAPIExtensionServer indicates an expected call of mustEmbedUnimplementedStreamAPIExtensionServer.
func (mr *MockUnsafeStreamAPIExtensionServerMockRecorder) mustEmbedUnimplementedStreamAPIExtensionServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedStreamAPIExtensionServer", reflect.TypeOf((*MockUnsafeStreamAPIExtensionServer)(nil).mustEmbedUnimplementedStreamAPIExtensionServer))
}

// MockStreamAPIExtension_ConnectInternalServer is a mock of StreamAPIExtension_ConnectInternalServer interface.
type MockStreamAPIExtension_ConnectInternalServer struct {
	ctrl     *gomock.Controller
	recorder *MockStreamAPIExtension_ConnectInternalServerMockRecorder
}

// MockStreamAPIExtension_ConnectInternalServerMockRecorder is the mock recorder for MockStreamAPIExtension_ConnectInternalServer.
type MockStreamAPIExtension_ConnectInternalServerMockRecorder struct {
	mock *MockStreamAPIExtension_ConnectInternalServer
}

// NewMockStreamAPIExtension_ConnectInternalServer creates a new mock instance.
func NewMockStreamAPIExtension_ConnectInternalServer(ctrl *gomock.Controller) *MockStreamAPIExtension_ConnectInternalServer {
	mock := &MockStreamAPIExtension_ConnectInternalServer{ctrl: ctrl}
	mock.recorder = &MockStreamAPIExtension_ConnectInternalServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamAPIExtension_ConnectInternalServer) EXPECT() *MockStreamAPIExtension_ConnectInternalServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockStreamAPIExtension_ConnectInternalServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockStreamAPIExtension_ConnectInternalServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockStreamAPIExtension_ConnectInternalServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockStreamAPIExtension_ConnectInternalServer) Recv() (*totem.RPC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*totem.RPC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockStreamAPIExtension_ConnectInternalServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockStreamAPIExtension_ConnectInternalServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockStreamAPIExtension_ConnectInternalServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockStreamAPIExtension_ConnectInternalServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockStreamAPIExtension_ConnectInternalServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockStreamAPIExtension_ConnectInternalServer) Send(arg0 *totem.RPC) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockStreamAPIExtension_ConnectInternalServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockStreamAPIExtension_ConnectInternalServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockStreamAPIExtension_ConnectInternalServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockStreamAPIExtension_ConnectInternalServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockStreamAPIExtension_ConnectInternalServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockStreamAPIExtension_ConnectInternalServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockStreamAPIExtension_ConnectInternalServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockStreamAPIExtension_ConnectInternalServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockStreamAPIExtension_ConnectInternalServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockStreamAPIExtension_ConnectInternalServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockStreamAPIExtension_ConnectInternalServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockStreamAPIExtension_ConnectInternalServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockStreamAPIExtension_ConnectInternalServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockStreamAPIExtension_ConnectInternalServer)(nil).SetTrailer), arg0)
}

// MockUnaryAPIExtensionClient is a mock of UnaryAPIExtensionClient interface.
type MockUnaryAPIExtensionClient struct {
	ctrl     *gomock.Controller
	recorder *MockUnaryAPIExtensionClientMockRecorder
}

// MockUnaryAPIExtensionClientMockRecorder is the mock recorder for MockUnaryAPIExtensionClient.
type MockUnaryAPIExtensionClientMockRecorder struct {
	mock *MockUnaryAPIExtensionClient
}

// NewMockUnaryAPIExtensionClient creates a new mock instance.
func NewMockUnaryAPIExtensionClient(ctrl *gomock.Controller) *MockUnaryAPIExtensionClient {
	mock := &MockUnaryAPIExtensionClient{ctrl: ctrl}
	mock.recorder = &MockUnaryAPIExtensionClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnaryAPIExtensionClient) EXPECT() *MockUnaryAPIExtensionClientMockRecorder {
	return m.recorder
}

// UnaryDescriptor mocks base method.
func (m *MockUnaryAPIExtensionClient) UnaryDescriptor(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*descriptorpb.ServiceDescriptorProto, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnaryDescriptor", varargs...)
	ret0, _ := ret[0].(*descriptorpb.ServiceDescriptorProto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnaryDescriptor indicates an expected call of UnaryDescriptor.
func (mr *MockUnaryAPIExtensionClientMockRecorder) UnaryDescriptor(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnaryDescriptor", reflect.TypeOf((*MockUnaryAPIExtensionClient)(nil).UnaryDescriptor), varargs...)
}

// MockUnaryAPIExtensionServer is a mock of UnaryAPIExtensionServer interface.
type MockUnaryAPIExtensionServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnaryAPIExtensionServerMockRecorder
}

// MockUnaryAPIExtensionServerMockRecorder is the mock recorder for MockUnaryAPIExtensionServer.
type MockUnaryAPIExtensionServerMockRecorder struct {
	mock *MockUnaryAPIExtensionServer
}

// NewMockUnaryAPIExtensionServer creates a new mock instance.
func NewMockUnaryAPIExtensionServer(ctrl *gomock.Controller) *MockUnaryAPIExtensionServer {
	mock := &MockUnaryAPIExtensionServer{ctrl: ctrl}
	mock.recorder = &MockUnaryAPIExtensionServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnaryAPIExtensionServer) EXPECT() *MockUnaryAPIExtensionServerMockRecorder {
	return m.recorder
}

// UnaryDescriptor mocks base method.
func (m *MockUnaryAPIExtensionServer) UnaryDescriptor(arg0 context.Context, arg1 *emptypb.Empty) (*descriptorpb.ServiceDescriptorProto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnaryDescriptor", arg0, arg1)
	ret0, _ := ret[0].(*descriptorpb.ServiceDescriptorProto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnaryDescriptor indicates an expected call of UnaryDescriptor.
func (mr *MockUnaryAPIExtensionServerMockRecorder) UnaryDescriptor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnaryDescriptor", reflect.TypeOf((*MockUnaryAPIExtensionServer)(nil).UnaryDescriptor), arg0, arg1)
}

// mustEmbedUnimplementedUnaryAPIExtensionServer mocks base method.
func (m *MockUnaryAPIExtensionServer) mustEmbedUnimplementedUnaryAPIExtensionServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedUnaryAPIExtensionServer")
}

// mustEmbedUnimplementedUnaryAPIExtensionServer indicates an expected call of mustEmbedUnimplementedUnaryAPIExtensionServer.
func (mr *MockUnaryAPIExtensionServerMockRecorder) mustEmbedUnimplementedUnaryAPIExtensionServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedUnaryAPIExtensionServer", reflect.TypeOf((*MockUnaryAPIExtensionServer)(nil).mustEmbedUnimplementedUnaryAPIExtensionServer))
}

// MockUnsafeUnaryAPIExtensionServer is a mock of UnsafeUnaryAPIExtensionServer interface.
type MockUnsafeUnaryAPIExtensionServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeUnaryAPIExtensionServerMockRecorder
}

// MockUnsafeUnaryAPIExtensionServerMockRecorder is the mock recorder for MockUnsafeUnaryAPIExtensionServer.
type MockUnsafeUnaryAPIExtensionServerMockRecorder struct {
	mock *MockUnsafeUnaryAPIExtensionServer
}

// NewMockUnsafeUnaryAPIExtensionServer creates a new mock instance.
func NewMockUnsafeUnaryAPIExtensionServer(ctrl *gomock.Controller) *MockUnsafeUnaryAPIExtensionServer {
	mock := &MockUnsafeUnaryAPIExtensionServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeUnaryAPIExtensionServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeUnaryAPIExtensionServer) EXPECT() *MockUnsafeUnaryAPIExtensionServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedUnaryAPIExtensionServer mocks base method.
func (m *MockUnsafeUnaryAPIExtensionServer) mustEmbedUnimplementedUnaryAPIExtensionServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedUnaryAPIExtensionServer")
}

// mustEmbedUnimplementedUnaryAPIExtensionServer indicates an expected call of mustEmbedUnimplementedUnaryAPIExtensionServer.
func (mr *MockUnsafeUnaryAPIExtensionServerMockRecorder) mustEmbedUnimplementedUnaryAPIExtensionServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedUnaryAPIExtensionServer", reflect.TypeOf((*MockUnsafeUnaryAPIExtensionServer)(nil).mustEmbedUnimplementedUnaryAPIExtensionServer))
}
