// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/update/update.go

// Package mock_update is a generated GoMock package.
package mock_update

import (
	context "context"
	reflect "reflect"

	prometheus "github.com/prometheus/client_golang/prometheus"
	v1 "github.com/open-panoptes/opni/pkg/apis/control/v1"
	urn "github.com/open-panoptes/opni/pkg/urn"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockUpdateTypeHandler is a mock of UpdateTypeHandler interface.
type MockUpdateTypeHandler struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateTypeHandlerMockRecorder
}

// MockUpdateTypeHandlerMockRecorder is the mock recorder for MockUpdateTypeHandler.
type MockUpdateTypeHandlerMockRecorder struct {
	mock *MockUpdateTypeHandler
}

// NewMockUpdateTypeHandler creates a new mock instance.
func NewMockUpdateTypeHandler(ctrl *gomock.Controller) *MockUpdateTypeHandler {
	mock := &MockUpdateTypeHandler{ctrl: ctrl}
	mock.recorder = &MockUpdateTypeHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateTypeHandler) EXPECT() *MockUpdateTypeHandlerMockRecorder {
	return m.recorder
}

// CalculateExpectedManifest mocks base method.
func (m *MockUpdateTypeHandler) CalculateExpectedManifest(arg0 context.Context, arg1 urn.UpdateType) (*v1.UpdateManifest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateExpectedManifest", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpdateManifest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateExpectedManifest indicates an expected call of CalculateExpectedManifest.
func (mr *MockUpdateTypeHandlerMockRecorder) CalculateExpectedManifest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateExpectedManifest", reflect.TypeOf((*MockUpdateTypeHandler)(nil).CalculateExpectedManifest), arg0, arg1)
}

// CalculateUpdate mocks base method.
func (m *MockUpdateTypeHandler) CalculateUpdate(arg0 context.Context, arg1 *v1.UpdateManifest) (*v1.PatchList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateUpdate", arg0, arg1)
	ret0, _ := ret[0].(*v1.PatchList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateUpdate indicates an expected call of CalculateUpdate.
func (mr *MockUpdateTypeHandlerMockRecorder) CalculateUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateUpdate", reflect.TypeOf((*MockUpdateTypeHandler)(nil).CalculateUpdate), arg0, arg1)
}

// Collectors mocks base method.
func (m *MockUpdateTypeHandler) Collectors() []prometheus.Collector {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collectors")
	ret0, _ := ret[0].([]prometheus.Collector)
	return ret0
}

// Collectors indicates an expected call of Collectors.
func (mr *MockUpdateTypeHandlerMockRecorder) Collectors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collectors", reflect.TypeOf((*MockUpdateTypeHandler)(nil).Collectors))
}

// Strategy mocks base method.
func (m *MockUpdateTypeHandler) Strategy() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Strategy")
	ret0, _ := ret[0].(string)
	return ret0
}

// Strategy indicates an expected call of Strategy.
func (mr *MockUpdateTypeHandlerMockRecorder) Strategy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Strategy", reflect.TypeOf((*MockUpdateTypeHandler)(nil).Strategy))
}

// MockUpdateStreamInterceptor is a mock of UpdateStreamInterceptor interface.
type MockUpdateStreamInterceptor struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateStreamInterceptorMockRecorder
}

// MockUpdateStreamInterceptorMockRecorder is the mock recorder for MockUpdateStreamInterceptor.
type MockUpdateStreamInterceptorMockRecorder struct {
	mock *MockUpdateStreamInterceptor
}

// NewMockUpdateStreamInterceptor creates a new mock instance.
func NewMockUpdateStreamInterceptor(ctrl *gomock.Controller) *MockUpdateStreamInterceptor {
	mock := &MockUpdateStreamInterceptor{ctrl: ctrl}
	mock.recorder = &MockUpdateStreamInterceptorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateStreamInterceptor) EXPECT() *MockUpdateStreamInterceptorMockRecorder {
	return m.recorder
}

// StreamServerInterceptor mocks base method.
func (m *MockUpdateStreamInterceptor) StreamServerInterceptor() grpc.StreamServerInterceptor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamServerInterceptor")
	ret0, _ := ret[0].(grpc.StreamServerInterceptor)
	return ret0
}

// StreamServerInterceptor indicates an expected call of StreamServerInterceptor.
func (mr *MockUpdateStreamInterceptorMockRecorder) StreamServerInterceptor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamServerInterceptor", reflect.TypeOf((*MockUpdateStreamInterceptor)(nil).StreamServerInterceptor))
}

// MockSyncHandler is a mock of SyncHandler interface.
type MockSyncHandler struct {
	ctrl     *gomock.Controller
	recorder *MockSyncHandlerMockRecorder
}

// MockSyncHandlerMockRecorder is the mock recorder for MockSyncHandler.
type MockSyncHandlerMockRecorder struct {
	mock *MockSyncHandler
}

// NewMockSyncHandler creates a new mock instance.
func NewMockSyncHandler(ctrl *gomock.Controller) *MockSyncHandler {
	mock := &MockSyncHandler{ctrl: ctrl}
	mock.recorder = &MockSyncHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyncHandler) EXPECT() *MockSyncHandlerMockRecorder {
	return m.recorder
}

// GetCurrentManifest mocks base method.
func (m *MockSyncHandler) GetCurrentManifest(arg0 context.Context) (*v1.UpdateManifest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentManifest", arg0)
	ret0, _ := ret[0].(*v1.UpdateManifest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentManifest indicates an expected call of GetCurrentManifest.
func (mr *MockSyncHandlerMockRecorder) GetCurrentManifest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentManifest", reflect.TypeOf((*MockSyncHandler)(nil).GetCurrentManifest), arg0)
}

// HandleSyncResults mocks base method.
func (m *MockSyncHandler) HandleSyncResults(arg0 context.Context, arg1 *v1.SyncResults) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleSyncResults", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleSyncResults indicates an expected call of HandleSyncResults.
func (mr *MockSyncHandlerMockRecorder) HandleSyncResults(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleSyncResults", reflect.TypeOf((*MockSyncHandler)(nil).HandleSyncResults), arg0, arg1)
}

// Strategy mocks base method.
func (m *MockSyncHandler) Strategy() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Strategy")
	ret0, _ := ret[0].(string)
	return ret0
}

// Strategy indicates an expected call of Strategy.
func (mr *MockSyncHandlerMockRecorder) Strategy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Strategy", reflect.TypeOf((*MockSyncHandler)(nil).Strategy))
}

// Mockentry is a mock of entry interface.
type Mockentry struct {
	ctrl     *gomock.Controller
	recorder *MockentryMockRecorder
}

// MockentryMockRecorder is the mock recorder for Mockentry.
type MockentryMockRecorder struct {
	mock *Mockentry
}

// NewMockentry creates a new mock instance.
func NewMockentry(ctrl *gomock.Controller) *Mockentry {
	mock := &Mockentry{ctrl: ctrl}
	mock.recorder = &MockentryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockentry) EXPECT() *MockentryMockRecorder {
	return m.recorder
}

// GetPackage mocks base method.
func (m *Mockentry) GetPackage() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackage")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPackage indicates an expected call of GetPackage.
func (mr *MockentryMockRecorder) GetPackage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackage", reflect.TypeOf((*Mockentry)(nil).GetPackage))
}
