syntax = "proto3";

package capability;

import "github.com/kralicky/totem/extensions.proto";
import "github.com/open-panoptes/opni/pkg/apis/core/v1/core.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/open-panoptes/opni/pkg/apis/capability/v1";

service Backend {
  // Returns info about the backend, including capability name
  rpc Info(google.protobuf.Empty) returns (Details);

  // Returns an error if installing the capability would fail.
  rpc CanInstall(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option deprecated = true;
  }

  // Installs the capability on a cluster.
  rpc Install(InstallRequest) returns (InstallResponse);

  // Returns common runtime config info for this capability from a specific
  // cluster (node).
  rpc Status(core.Reference) returns (NodeCapabilityStatus);

  // Requests the backend to clean up any resources it owns and prepare
  // for uninstallation. This process is asynchronous. The status of the
  // operation can be queried using the UninstallStatus method, or canceled
  // using the CancelUninstall method.
  rpc Uninstall(UninstallRequest) returns (google.protobuf.Empty);

  // Gets the status of the uninstall task for the given cluster.
  rpc UninstallStatus(core.Reference) returns (core.TaskStatus);

  // Cancels an uninstall task for the given cluster, if it is still pending.
  rpc CancelUninstall(core.Reference) returns (google.protobuf.Empty);

  // Returns a go template string which will generate a shell command used to
  // install the capability. This will be displayed to the user in the UI.
  // See InstallerTemplateSpec above for the available template fields.
  rpc InstallerTemplate(google.protobuf.Empty) returns (InstallerTemplateResponse) {
    option deprecated = true;
  }
}

service Node {
  rpc SyncNow(Filter) returns (google.protobuf.Empty) {
    option (totem.qos) = {
      replicationStrategy: Broadcast
    };
  }
}

message Details {
  string          name    = 1;
  string          source  = 2;
  repeated string drivers = 3;
}

message SyncRequest {
  // An empty cluster ID indicates that all clusters should be synced.
  core.Reference cluster = 1;
  Filter         filter  = 2;
}

message Filter {
  repeated string capabilityNames = 1;
}

message InstallRequest {
  core.Reference cluster        = 1;
  bool           ignoreWarnings = 2;
}

enum InstallResponseStatus {
  Unknown = 0;
  Success = 1;
  Warning = 2;
  Error   = 3;
}

message InstallResponse {
  InstallResponseStatus status  = 1;
  string                message = 2;
}

message UninstallRequest {
  core.Reference         cluster = 1;
  google.protobuf.Struct options = 2;
}

message InstallerTemplateResponse {
  string template = 1;
}

message NodeCapabilityStatus {
  bool                      enabled      = 1;
  google.protobuf.Timestamp lastSync     = 2;
  repeated string           conditions   = 3;
  core.Revision             lastRevision = 4;
}
